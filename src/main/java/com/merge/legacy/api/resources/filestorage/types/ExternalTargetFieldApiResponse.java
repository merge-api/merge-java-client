/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.legacy.api.resources.filestorage.types;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.legacy.api.core.ObjectMappers;

import java.util.*;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExternalTargetFieldApiResponse.Builder.class)
public final class ExternalTargetFieldApiResponse {
    private final Optional<List<ExternalTargetFieldApi>> file;

    private final Optional<List<ExternalTargetFieldApi>> folder;

    private final Optional<List<ExternalTargetFieldApi>> drive;

    private final Optional<List<ExternalTargetFieldApi>> group;

    private final Optional<List<ExternalTargetFieldApi>> user;

    private final Map<String, Object> additionalProperties;

    private ExternalTargetFieldApiResponse(
            Optional<List<ExternalTargetFieldApi>> file,
            Optional<List<ExternalTargetFieldApi>> folder,
            Optional<List<ExternalTargetFieldApi>> drive,
            Optional<List<ExternalTargetFieldApi>> group,
            Optional<List<ExternalTargetFieldApi>> user,
            Map<String, Object> additionalProperties) {
        this.file = file;
        this.folder = folder;
        this.drive = drive;
        this.group = group;
        this.user = user;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("File")
    public Optional<List<ExternalTargetFieldApi>> getFile() {
        return file;
    }

    @JsonProperty("Folder")
    public Optional<List<ExternalTargetFieldApi>> getFolder() {
        return folder;
    }

    @JsonProperty("Drive")
    public Optional<List<ExternalTargetFieldApi>> getDrive() {
        return drive;
    }

    @JsonProperty("Group")
    public Optional<List<ExternalTargetFieldApi>> getGroup() {
        return group;
    }

    @JsonProperty("User")
    public Optional<List<ExternalTargetFieldApi>> getUser() {
        return user;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExternalTargetFieldApiResponse && equalTo((ExternalTargetFieldApiResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExternalTargetFieldApiResponse other) {
        return file.equals(other.file)
                && folder.equals(other.folder)
                && drive.equals(other.drive)
                && group.equals(other.group)
                && user.equals(other.user);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.file, this.folder, this.drive, this.group, this.user);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<ExternalTargetFieldApi>> file = Optional.empty();

        private Optional<List<ExternalTargetFieldApi>> folder = Optional.empty();

        private Optional<List<ExternalTargetFieldApi>> drive = Optional.empty();

        private Optional<List<ExternalTargetFieldApi>> group = Optional.empty();

        private Optional<List<ExternalTargetFieldApi>> user = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExternalTargetFieldApiResponse other) {
            file(other.getFile());
            folder(other.getFolder());
            drive(other.getDrive());
            group(other.getGroup());
            user(other.getUser());
            return this;
        }

        @JsonSetter(value = "File", nulls = Nulls.SKIP)
        public Builder file(Optional<List<ExternalTargetFieldApi>> file) {
            this.file = file;
            return this;
        }

        public Builder file(List<ExternalTargetFieldApi> file) {
            this.file = Optional.ofNullable(file);
            return this;
        }

        @JsonSetter(value = "Folder", nulls = Nulls.SKIP)
        public Builder folder(Optional<List<ExternalTargetFieldApi>> folder) {
            this.folder = folder;
            return this;
        }

        public Builder folder(List<ExternalTargetFieldApi> folder) {
            this.folder = Optional.ofNullable(folder);
            return this;
        }

        @JsonSetter(value = "Drive", nulls = Nulls.SKIP)
        public Builder drive(Optional<List<ExternalTargetFieldApi>> drive) {
            this.drive = drive;
            return this;
        }

        public Builder drive(List<ExternalTargetFieldApi> drive) {
            this.drive = Optional.ofNullable(drive);
            return this;
        }

        @JsonSetter(value = "Group", nulls = Nulls.SKIP)
        public Builder group(Optional<List<ExternalTargetFieldApi>> group) {
            this.group = group;
            return this;
        }

        public Builder group(List<ExternalTargetFieldApi> group) {
            this.group = Optional.ofNullable(group);
            return this;
        }

        @JsonSetter(value = "User", nulls = Nulls.SKIP)
        public Builder user(Optional<List<ExternalTargetFieldApi>> user) {
            this.user = user;
            return this;
        }

        public Builder user(List<ExternalTargetFieldApi> user) {
            this.user = Optional.ofNullable(user);
            return this;
        }

        public ExternalTargetFieldApiResponse build() {
            return new ExternalTargetFieldApiResponse(file, folder, drive, group, user, additionalProperties);
        }
    }
}
