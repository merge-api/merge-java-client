/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.legacy.api.resources.crm.fieldmapping.requests;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.legacy.api.core.ObjectMappers;
import java.util.*;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateFieldMappingRequest.Builder.class)
public final class CreateFieldMappingRequest {
    private final Optional<Boolean> excludeRemoteFieldMetadata;

    private final String targetFieldName;

    private final String targetFieldDescription;

    private final List<JsonNode> remoteFieldTraversalPath;

    private final String remoteMethod;

    private final String remoteUrlPath;

    private final String commonModelName;

    private final Map<String, Object> additionalProperties;

    private CreateFieldMappingRequest(
            Optional<Boolean> excludeRemoteFieldMetadata,
            String targetFieldName,
            String targetFieldDescription,
            List<JsonNode> remoteFieldTraversalPath,
            String remoteMethod,
            String remoteUrlPath,
            String commonModelName,
            Map<String, Object> additionalProperties) {
        this.excludeRemoteFieldMetadata = excludeRemoteFieldMetadata;
        this.targetFieldName = targetFieldName;
        this.targetFieldDescription = targetFieldDescription;
        this.remoteFieldTraversalPath = remoteFieldTraversalPath;
        this.remoteMethod = remoteMethod;
        this.remoteUrlPath = remoteUrlPath;
        this.commonModelName = commonModelName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If <code>true</code>, remote fields metadata is excluded from each field mapping instance (i.e. <code>remote_fields.remote_key_name</code> and <code>remote_fields.schema</code> will be null). This will increase the speed of the request since these fields require some calculations.
     */
    @JsonProperty("exclude_remote_field_metadata")
    public Optional<Boolean> getExcludeRemoteFieldMetadata() {
        return excludeRemoteFieldMetadata;
    }

    /**
     * @return The name of the target field you want this remote field to map to.
     */
    @JsonProperty("target_field_name")
    public String getTargetFieldName() {
        return targetFieldName;
    }

    /**
     * @return The description of the target field you want this remote field to map to.
     */
    @JsonProperty("target_field_description")
    public String getTargetFieldDescription() {
        return targetFieldDescription;
    }

    /**
     * @return The field traversal path of the remote field listed when you hit the GET /remote-fields endpoint.
     */
    @JsonProperty("remote_field_traversal_path")
    public List<JsonNode> getRemoteFieldTraversalPath() {
        return remoteFieldTraversalPath;
    }

    /**
     * @return The method of the remote endpoint where the remote field is coming from.
     */
    @JsonProperty("remote_method")
    public String getRemoteMethod() {
        return remoteMethod;
    }

    /**
     * @return The path of the remote endpoint where the remote field is coming from.
     */
    @JsonProperty("remote_url_path")
    public String getRemoteUrlPath() {
        return remoteUrlPath;
    }

    /**
     * @return The name of the Common Model that the remote field corresponds to in a given category.
     */
    @JsonProperty("common_model_name")
    public String getCommonModelName() {
        return commonModelName;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateFieldMappingRequest && equalTo((CreateFieldMappingRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateFieldMappingRequest other) {
        return excludeRemoteFieldMetadata.equals(other.excludeRemoteFieldMetadata)
                && targetFieldName.equals(other.targetFieldName)
                && targetFieldDescription.equals(other.targetFieldDescription)
                && remoteFieldTraversalPath.equals(other.remoteFieldTraversalPath)
                && remoteMethod.equals(other.remoteMethod)
                && remoteUrlPath.equals(other.remoteUrlPath)
                && commonModelName.equals(other.commonModelName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.excludeRemoteFieldMetadata,
                this.targetFieldName,
                this.targetFieldDescription,
                this.remoteFieldTraversalPath,
                this.remoteMethod,
                this.remoteUrlPath,
                this.commonModelName);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TargetFieldNameStage builder() {
        return new Builder();
    }

    public interface TargetFieldNameStage {
        TargetFieldDescriptionStage targetFieldName(@NotNull String targetFieldName);

        Builder from(CreateFieldMappingRequest other);
    }

    public interface TargetFieldDescriptionStage {
        RemoteMethodStage targetFieldDescription(@NotNull String targetFieldDescription);
    }

    public interface RemoteMethodStage {
        RemoteUrlPathStage remoteMethod(@NotNull String remoteMethod);
    }

    public interface RemoteUrlPathStage {
        CommonModelNameStage remoteUrlPath(@NotNull String remoteUrlPath);
    }

    public interface CommonModelNameStage {
        _FinalStage commonModelName(@NotNull String commonModelName);
    }

    public interface _FinalStage {
        CreateFieldMappingRequest build();

        _FinalStage excludeRemoteFieldMetadata(Optional<Boolean> excludeRemoteFieldMetadata);

        _FinalStage excludeRemoteFieldMetadata(Boolean excludeRemoteFieldMetadata);

        _FinalStage remoteFieldTraversalPath(List<JsonNode> remoteFieldTraversalPath);

        _FinalStage addRemoteFieldTraversalPath(JsonNode remoteFieldTraversalPath);

        _FinalStage addAllRemoteFieldTraversalPath(List<JsonNode> remoteFieldTraversalPath);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TargetFieldNameStage,
                    TargetFieldDescriptionStage,
                    RemoteMethodStage,
                    RemoteUrlPathStage,
                    CommonModelNameStage,
                    _FinalStage {
        private String targetFieldName;

        private String targetFieldDescription;

        private String remoteMethod;

        private String remoteUrlPath;

        private String commonModelName;

        private List<JsonNode> remoteFieldTraversalPath = new ArrayList<>();

        private Optional<Boolean> excludeRemoteFieldMetadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(CreateFieldMappingRequest other) {
            excludeRemoteFieldMetadata(other.getExcludeRemoteFieldMetadata());
            targetFieldName(other.getTargetFieldName());
            targetFieldDescription(other.getTargetFieldDescription());
            remoteFieldTraversalPath(other.getRemoteFieldTraversalPath());
            remoteMethod(other.getRemoteMethod());
            remoteUrlPath(other.getRemoteUrlPath());
            commonModelName(other.getCommonModelName());
            return this;
        }

        /**
         * <p>The name of the target field you want this remote field to map to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("target_field_name")
        public TargetFieldDescriptionStage targetFieldName(@NotNull String targetFieldName) {
            this.targetFieldName = targetFieldName;
            return this;
        }

        /**
         * <p>The description of the target field you want this remote field to map to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("target_field_description")
        public RemoteMethodStage targetFieldDescription(@NotNull String targetFieldDescription) {
            this.targetFieldDescription = targetFieldDescription;
            return this;
        }

        /**
         * <p>The method of the remote endpoint where the remote field is coming from.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("remote_method")
        public RemoteUrlPathStage remoteMethod(@NotNull String remoteMethod) {
            this.remoteMethod = remoteMethod;
            return this;
        }

        /**
         * <p>The path of the remote endpoint where the remote field is coming from.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("remote_url_path")
        public CommonModelNameStage remoteUrlPath(@NotNull String remoteUrlPath) {
            this.remoteUrlPath = remoteUrlPath;
            return this;
        }

        /**
         * <p>The name of the Common Model that the remote field corresponds to in a given category.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("common_model_name")
        public _FinalStage commonModelName(@NotNull String commonModelName) {
            this.commonModelName = commonModelName;
            return this;
        }

        /**
         * <p>The field traversal path of the remote field listed when you hit the GET /remote-fields endpoint.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage addAllRemoteFieldTraversalPath(List<JsonNode> remoteFieldTraversalPath) {
            this.remoteFieldTraversalPath.addAll(remoteFieldTraversalPath);
            return this;
        }

        /**
         * <p>The field traversal path of the remote field listed when you hit the GET /remote-fields endpoint.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage addRemoteFieldTraversalPath(JsonNode remoteFieldTraversalPath) {
            this.remoteFieldTraversalPath.add(remoteFieldTraversalPath);
            return this;
        }

        @Override
        @JsonSetter(value = "remote_field_traversal_path", nulls = Nulls.SKIP)
        public _FinalStage remoteFieldTraversalPath(List<JsonNode> remoteFieldTraversalPath) {
            this.remoteFieldTraversalPath.clear();
            this.remoteFieldTraversalPath.addAll(remoteFieldTraversalPath);
            return this;
        }

        /**
         * <p>If <code>true</code>, remote fields metadata is excluded from each field mapping instance (i.e. <code>remote_fields.remote_key_name</code> and <code>remote_fields.schema</code> will be null). This will increase the speed of the request since these fields require some calculations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage excludeRemoteFieldMetadata(Boolean excludeRemoteFieldMetadata) {
            this.excludeRemoteFieldMetadata = Optional.ofNullable(excludeRemoteFieldMetadata);
            return this;
        }

        @Override
        @JsonSetter(value = "exclude_remote_field_metadata", nulls = Nulls.SKIP)
        public _FinalStage excludeRemoteFieldMetadata(Optional<Boolean> excludeRemoteFieldMetadata) {
            this.excludeRemoteFieldMetadata = excludeRemoteFieldMetadata;
            return this;
        }

        @Override
        public CreateFieldMappingRequest build() {
            return new CreateFieldMappingRequest(
                    excludeRemoteFieldMetadata,
                    targetFieldName,
                    targetFieldDescription,
                    remoteFieldTraversalPath,
                    remoteMethod,
                    remoteUrlPath,
                    commonModelName,
                    additionalProperties);
        }
    }
}
