/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.legacy.api.resources.accounting.types;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.legacy.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.*;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreditNoteLineItem.Builder.class)
public final class CreditNoteLineItem {
    private final Optional<String> id;

    private final Optional<String> remoteId;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> modifiedAt;

    private final Optional<CreditNoteLineItemItem> item;

    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<String> quantity;

    private final Optional<String> memo;

    private final Optional<String> unitPrice;

    private final Optional<String> taxRate;

    private final Optional<String> totalLineAmount;

    private final Optional<String> trackingCategory;

    private final Optional<List<Optional<String>>> trackingCategories;

    private final Optional<String> account;

    private final Optional<CreditNoteLineItemCompany> company;

    private final Optional<Boolean> remoteWasDeleted;

    private final Map<String, Object> additionalProperties;

    private CreditNoteLineItem(
            Optional<String> id,
            Optional<String> remoteId,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> modifiedAt,
            Optional<CreditNoteLineItemItem> item,
            Optional<String> name,
            Optional<String> description,
            Optional<String> quantity,
            Optional<String> memo,
            Optional<String> unitPrice,
            Optional<String> taxRate,
            Optional<String> totalLineAmount,
            Optional<String> trackingCategory,
            Optional<List<Optional<String>>> trackingCategories,
            Optional<String> account,
            Optional<CreditNoteLineItemCompany> company,
            Optional<Boolean> remoteWasDeleted,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.remoteId = remoteId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.item = item;
        this.name = name;
        this.description = description;
        this.quantity = quantity;
        this.memo = memo;
        this.unitPrice = unitPrice;
        this.taxRate = taxRate;
        this.totalLineAmount = totalLineAmount;
        this.trackingCategory = trackingCategory;
        this.trackingCategories = trackingCategories;
        this.account = account;
        this.company = company;
        this.remoteWasDeleted = remoteWasDeleted;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The third-party API ID of the matching object.
     */
    @JsonProperty("remote_id")
    public Optional<String> getRemoteId() {
        return remoteId;
    }

    /**
     * @return The datetime that this object was created by Merge.
     */
    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The datetime that this object was modified by Merge.
     */
    @JsonProperty("modified_at")
    public Optional<OffsetDateTime> getModifiedAt() {
        return modifiedAt;
    }

    @JsonProperty("item")
    public Optional<CreditNoteLineItemItem> getItem() {
        return item;
    }

    /**
     * @return The credit note line item's name.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The description of the item that is owed.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The credit note line item's quantity.
     */
    @JsonProperty("quantity")
    public Optional<String> getQuantity() {
        return quantity;
    }

    /**
     * @return The credit note line item's memo.
     */
    @JsonProperty("memo")
    public Optional<String> getMemo() {
        return memo;
    }

    /**
     * @return The credit note line item's unit price.
     */
    @JsonProperty("unit_price")
    public Optional<String> getUnitPrice() {
        return unitPrice;
    }

    /**
     * @return The tax rate that applies to this line item.
     */
    @JsonProperty("tax_rate")
    public Optional<String> getTaxRate() {
        return taxRate;
    }

    /**
     * @return The credit note line item's total.
     */
    @JsonProperty("total_line_amount")
    public Optional<String> getTotalLineAmount() {
        return totalLineAmount;
    }

    /**
     * @return The credit note line item's associated tracking category.
     */
    @JsonProperty("tracking_category")
    public Optional<String> getTrackingCategory() {
        return trackingCategory;
    }

    /**
     * @return The credit note line item's associated tracking categories.
     */
    @JsonProperty("tracking_categories")
    public Optional<List<Optional<String>>> getTrackingCategories() {
        return trackingCategories;
    }

    /**
     * @return The credit note line item's account.
     */
    @JsonProperty("account")
    public Optional<String> getAccount() {
        return account;
    }

    /**
     * @return The company the credit note belongs to.
     */
    @JsonProperty("company")
    public Optional<CreditNoteLineItemCompany> getCompany() {
        return company;
    }

    /**
     * @return Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. <a href="https://docs.merge.dev/integrations/hris/supported-features/">Learn more</a>.
     */
    @JsonProperty("remote_was_deleted")
    public Optional<Boolean> getRemoteWasDeleted() {
        return remoteWasDeleted;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreditNoteLineItem && equalTo((CreditNoteLineItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreditNoteLineItem other) {
        return id.equals(other.id)
                && remoteId.equals(other.remoteId)
                && createdAt.equals(other.createdAt)
                && modifiedAt.equals(other.modifiedAt)
                && item.equals(other.item)
                && name.equals(other.name)
                && description.equals(other.description)
                && quantity.equals(other.quantity)
                && memo.equals(other.memo)
                && unitPrice.equals(other.unitPrice)
                && taxRate.equals(other.taxRate)
                && totalLineAmount.equals(other.totalLineAmount)
                && trackingCategory.equals(other.trackingCategory)
                && trackingCategories.equals(other.trackingCategories)
                && account.equals(other.account)
                && company.equals(other.company)
                && remoteWasDeleted.equals(other.remoteWasDeleted);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.remoteId,
                this.createdAt,
                this.modifiedAt,
                this.item,
                this.name,
                this.description,
                this.quantity,
                this.memo,
                this.unitPrice,
                this.taxRate,
                this.totalLineAmount,
                this.trackingCategory,
                this.trackingCategories,
                this.account,
                this.company,
                this.remoteWasDeleted);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> remoteId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<OffsetDateTime> modifiedAt = Optional.empty();

        private Optional<CreditNoteLineItemItem> item = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> quantity = Optional.empty();

        private Optional<String> memo = Optional.empty();

        private Optional<String> unitPrice = Optional.empty();

        private Optional<String> taxRate = Optional.empty();

        private Optional<String> totalLineAmount = Optional.empty();

        private Optional<String> trackingCategory = Optional.empty();

        private Optional<List<Optional<String>>> trackingCategories = Optional.empty();

        private Optional<String> account = Optional.empty();

        private Optional<CreditNoteLineItemCompany> company = Optional.empty();

        private Optional<Boolean> remoteWasDeleted = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreditNoteLineItem other) {
            id(other.getId());
            remoteId(other.getRemoteId());
            createdAt(other.getCreatedAt());
            modifiedAt(other.getModifiedAt());
            item(other.getItem());
            name(other.getName());
            description(other.getDescription());
            quantity(other.getQuantity());
            memo(other.getMemo());
            unitPrice(other.getUnitPrice());
            taxRate(other.getTaxRate());
            totalLineAmount(other.getTotalLineAmount());
            trackingCategory(other.getTrackingCategory());
            trackingCategories(other.getTrackingCategories());
            account(other.getAccount());
            company(other.getCompany());
            remoteWasDeleted(other.getRemoteWasDeleted());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "remote_id", nulls = Nulls.SKIP)
        public Builder remoteId(Optional<String> remoteId) {
            this.remoteId = remoteId;
            return this;
        }

        public Builder remoteId(String remoteId) {
            this.remoteId = Optional.ofNullable(remoteId);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "modified_at", nulls = Nulls.SKIP)
        public Builder modifiedAt(Optional<OffsetDateTime> modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }

        public Builder modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = Optional.ofNullable(modifiedAt);
            return this;
        }

        @JsonSetter(value = "item", nulls = Nulls.SKIP)
        public Builder item(Optional<CreditNoteLineItemItem> item) {
            this.item = item;
            return this;
        }

        public Builder item(CreditNoteLineItemItem item) {
            this.item = Optional.ofNullable(item);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<String> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(String quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        @JsonSetter(value = "memo", nulls = Nulls.SKIP)
        public Builder memo(Optional<String> memo) {
            this.memo = memo;
            return this;
        }

        public Builder memo(String memo) {
            this.memo = Optional.ofNullable(memo);
            return this;
        }

        @JsonSetter(value = "unit_price", nulls = Nulls.SKIP)
        public Builder unitPrice(Optional<String> unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public Builder unitPrice(String unitPrice) {
            this.unitPrice = Optional.ofNullable(unitPrice);
            return this;
        }

        @JsonSetter(value = "tax_rate", nulls = Nulls.SKIP)
        public Builder taxRate(Optional<String> taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        public Builder taxRate(String taxRate) {
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        @JsonSetter(value = "total_line_amount", nulls = Nulls.SKIP)
        public Builder totalLineAmount(Optional<String> totalLineAmount) {
            this.totalLineAmount = totalLineAmount;
            return this;
        }

        public Builder totalLineAmount(String totalLineAmount) {
            this.totalLineAmount = Optional.ofNullable(totalLineAmount);
            return this;
        }

        @JsonSetter(value = "tracking_category", nulls = Nulls.SKIP)
        public Builder trackingCategory(Optional<String> trackingCategory) {
            this.trackingCategory = trackingCategory;
            return this;
        }

        public Builder trackingCategory(String trackingCategory) {
            this.trackingCategory = Optional.ofNullable(trackingCategory);
            return this;
        }

        @JsonSetter(value = "tracking_categories", nulls = Nulls.SKIP)
        public Builder trackingCategories(Optional<List<Optional<String>>> trackingCategories) {
            this.trackingCategories = trackingCategories;
            return this;
        }

        public Builder trackingCategories(List<Optional<String>> trackingCategories) {
            this.trackingCategories = Optional.ofNullable(trackingCategories);
            return this;
        }

        @JsonSetter(value = "account", nulls = Nulls.SKIP)
        public Builder account(Optional<String> account) {
            this.account = account;
            return this;
        }

        public Builder account(String account) {
            this.account = Optional.ofNullable(account);
            return this;
        }

        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public Builder company(Optional<CreditNoteLineItemCompany> company) {
            this.company = company;
            return this;
        }

        public Builder company(CreditNoteLineItemCompany company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        @JsonSetter(value = "remote_was_deleted", nulls = Nulls.SKIP)
        public Builder remoteWasDeleted(Optional<Boolean> remoteWasDeleted) {
            this.remoteWasDeleted = remoteWasDeleted;
            return this;
        }

        public Builder remoteWasDeleted(Boolean remoteWasDeleted) {
            this.remoteWasDeleted = Optional.ofNullable(remoteWasDeleted);
            return this;
        }

        public CreditNoteLineItem build() {
            return new CreditNoteLineItem(
                    id,
                    remoteId,
                    createdAt,
                    modifiedAt,
                    item,
                    name,
                    description,
                    quantity,
                    memo,
                    unitPrice,
                    taxRate,
                    totalLineAmount,
                    trackingCategory,
                    trackingCategories,
                    account,
                    company,
                    remoteWasDeleted,
                    additionalProperties);
        }
    }
}
