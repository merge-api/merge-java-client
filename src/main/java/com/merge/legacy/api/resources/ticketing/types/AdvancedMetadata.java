/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.legacy.api.resources.ticketing.types;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import org.jetbrains.annotations.NotNull;

import java.util.*;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AdvancedMetadata.Builder.class)
public final class AdvancedMetadata {
    private final String id;

    private final Optional<String> displayName;

    private final Optional<String> description;

    private final Optional<Boolean> isRequired;

    private final Optional<Boolean> isCustom;

    private final Optional<List<JsonNode>> fieldChoices;

    private final Map<String, Object> additionalProperties;

    private AdvancedMetadata(
            String id,
            Optional<String> displayName,
            Optional<String> description,
            Optional<Boolean> isRequired,
            Optional<Boolean> isCustom,
            Optional<List<JsonNode>> fieldChoices,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.displayName = displayName;
        this.description = description;
        this.isRequired = isRequired;
        this.isCustom = isCustom;
        this.fieldChoices = fieldChoices;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("display_name")
    public Optional<String> getDisplayName() {
        return displayName;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("is_required")
    public Optional<Boolean> getIsRequired() {
        return isRequired;
    }

    @JsonProperty("is_custom")
    public Optional<Boolean> getIsCustom() {
        return isCustom;
    }

    @JsonProperty("field_choices")
    public Optional<List<JsonNode>> getFieldChoices() {
        return fieldChoices;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AdvancedMetadata && equalTo((AdvancedMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AdvancedMetadata other) {
        return id.equals(other.id)
                && displayName.equals(other.displayName)
                && description.equals(other.description)
                && isRequired.equals(other.isRequired)
                && isCustom.equals(other.isCustom)
                && fieldChoices.equals(other.fieldChoices);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.displayName, this.description, this.isRequired, this.isCustom, this.fieldChoices);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        _FinalStage id(@NotNull String id);

        Builder from(AdvancedMetadata other);
    }

    public interface _FinalStage {
        AdvancedMetadata build();

        _FinalStage displayName(Optional<String> displayName);

        _FinalStage displayName(String displayName);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage isRequired(Optional<Boolean> isRequired);

        _FinalStage isRequired(Boolean isRequired);

        _FinalStage isCustom(Optional<Boolean> isCustom);

        _FinalStage isCustom(Boolean isCustom);

        _FinalStage fieldChoices(Optional<List<JsonNode>> fieldChoices);

        _FinalStage fieldChoices(List<JsonNode> fieldChoices);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, _FinalStage {
        private String id;

        private Optional<List<JsonNode>> fieldChoices = Optional.empty();

        private Optional<Boolean> isCustom = Optional.empty();

        private Optional<Boolean> isRequired = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(AdvancedMetadata other) {
            id(other.getId());
            displayName(other.getDisplayName());
            description(other.getDescription());
            isRequired(other.getIsRequired());
            isCustom(other.getIsCustom());
            fieldChoices(other.getFieldChoices());
            return this;
        }

        @Override
        @JsonSetter("id")
        public _FinalStage id(@NotNull String id) {
            this.id = id;
            return this;
        }

        @Override
        public _FinalStage fieldChoices(List<JsonNode> fieldChoices) {
            this.fieldChoices = Optional.ofNullable(fieldChoices);
            return this;
        }

        @Override
        @JsonSetter(value = "field_choices", nulls = Nulls.SKIP)
        public _FinalStage fieldChoices(Optional<List<JsonNode>> fieldChoices) {
            this.fieldChoices = fieldChoices;
            return this;
        }

        @Override
        public _FinalStage isCustom(Boolean isCustom) {
            this.isCustom = Optional.ofNullable(isCustom);
            return this;
        }

        @Override
        @JsonSetter(value = "is_custom", nulls = Nulls.SKIP)
        public _FinalStage isCustom(Optional<Boolean> isCustom) {
            this.isCustom = isCustom;
            return this;
        }

        @Override
        public _FinalStage isRequired(Boolean isRequired) {
            this.isRequired = Optional.ofNullable(isRequired);
            return this;
        }

        @Override
        @JsonSetter(value = "is_required", nulls = Nulls.SKIP)
        public _FinalStage isRequired(Optional<Boolean> isRequired) {
            this.isRequired = isRequired;
            return this;
        }

        @Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @Override
        public _FinalStage displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        @Override
        @JsonSetter(value = "display_name", nulls = Nulls.SKIP)
        public _FinalStage displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        @Override
        public AdvancedMetadata build() {
            return new AdvancedMetadata(
                    id, displayName, description, isRequired, isCustom, fieldChoices, additionalProperties);
        }
    }
}
