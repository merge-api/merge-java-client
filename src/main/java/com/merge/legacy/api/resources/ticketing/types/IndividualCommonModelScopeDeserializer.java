/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.legacy.api.resources.ticketing.types;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.legacy.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IndividualCommonModelScopeDeserializer.Builder.class)
public final class IndividualCommonModelScopeDeserializer {
    private final String modelName;

    private final Optional<Map<String, ModelPermissionDeserializer>> modelPermissions;

    private final Optional<FieldPermissionDeserializer> fieldPermissions;

    private final Map<String, Object> additionalProperties;

    private IndividualCommonModelScopeDeserializer(
            String modelName,
            Optional<Map<String, ModelPermissionDeserializer>> modelPermissions,
            Optional<FieldPermissionDeserializer> fieldPermissions,
            Map<String, Object> additionalProperties) {
        this.modelName = modelName;
        this.modelPermissions = modelPermissions;
        this.fieldPermissions = fieldPermissions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("model_name")
    public String getModelName() {
        return modelName;
    }

    @JsonProperty("model_permissions")
    public Optional<Map<String, ModelPermissionDeserializer>> getModelPermissions() {
        return modelPermissions;
    }

    @JsonProperty("field_permissions")
    public Optional<FieldPermissionDeserializer> getFieldPermissions() {
        return fieldPermissions;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndividualCommonModelScopeDeserializer
                && equalTo((IndividualCommonModelScopeDeserializer) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndividualCommonModelScopeDeserializer other) {
        return modelName.equals(other.modelName)
                && modelPermissions.equals(other.modelPermissions)
                && fieldPermissions.equals(other.fieldPermissions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.modelName, this.modelPermissions, this.fieldPermissions);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ModelNameStage builder() {
        return new Builder();
    }

    public interface ModelNameStage {
        _FinalStage modelName(@NotNull String modelName);

        Builder from(IndividualCommonModelScopeDeserializer other);
    }

    public interface _FinalStage {
        IndividualCommonModelScopeDeserializer build();

        _FinalStage modelPermissions(Optional<Map<String, ModelPermissionDeserializer>> modelPermissions);

        _FinalStage modelPermissions(Map<String, ModelPermissionDeserializer> modelPermissions);

        _FinalStage fieldPermissions(Optional<FieldPermissionDeserializer> fieldPermissions);

        _FinalStage fieldPermissions(FieldPermissionDeserializer fieldPermissions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ModelNameStage, _FinalStage {
        private String modelName;

        private Optional<FieldPermissionDeserializer> fieldPermissions = Optional.empty();

        private Optional<Map<String, ModelPermissionDeserializer>> modelPermissions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(IndividualCommonModelScopeDeserializer other) {
            modelName(other.getModelName());
            modelPermissions(other.getModelPermissions());
            fieldPermissions(other.getFieldPermissions());
            return this;
        }

        @Override
        @JsonSetter("model_name")
        public _FinalStage modelName(@NotNull String modelName) {
            this.modelName = modelName;
            return this;
        }

        @Override
        public _FinalStage fieldPermissions(FieldPermissionDeserializer fieldPermissions) {
            this.fieldPermissions = Optional.ofNullable(fieldPermissions);
            return this;
        }

        @Override
        @JsonSetter(value = "field_permissions", nulls = Nulls.SKIP)
        public _FinalStage fieldPermissions(Optional<FieldPermissionDeserializer> fieldPermissions) {
            this.fieldPermissions = fieldPermissions;
            return this;
        }

        @Override
        public _FinalStage modelPermissions(Map<String, ModelPermissionDeserializer> modelPermissions) {
            this.modelPermissions = Optional.ofNullable(modelPermissions);
            return this;
        }

        @Override
        @JsonSetter(value = "model_permissions", nulls = Nulls.SKIP)
        public _FinalStage modelPermissions(Optional<Map<String, ModelPermissionDeserializer>> modelPermissions) {
            this.modelPermissions = modelPermissions;
            return this;
        }

        @Override
        public IndividualCommonModelScopeDeserializer build() {
            return new IndividualCommonModelScopeDeserializer(
                    modelName, modelPermissions, fieldPermissions, additionalProperties);
        }
    }
}
