/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.resources.accounting.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentTerm.Builder.class)
public final class PaymentTerm {
    private final Optional<String> id;

    private final Optional<String> remoteId;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> modifiedAt;

    private final String name;

    private final Optional<Boolean> isActive;

    private final Optional<PaymentTermCompany> company;

    private final Optional<Integer> daysUntilDue;

    private final Optional<Integer> discountDays;

    private final Optional<OffsetDateTime> remoteLastModifiedAt;

    private final Optional<Map<String, JsonNode>> fieldMappings;

    private final Optional<List<RemoteData>> remoteData;

    private final Map<String, Object> additionalProperties;

    private PaymentTerm(
            Optional<String> id,
            Optional<String> remoteId,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> modifiedAt,
            String name,
            Optional<Boolean> isActive,
            Optional<PaymentTermCompany> company,
            Optional<Integer> daysUntilDue,
            Optional<Integer> discountDays,
            Optional<OffsetDateTime> remoteLastModifiedAt,
            Optional<Map<String, JsonNode>> fieldMappings,
            Optional<List<RemoteData>> remoteData,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.remoteId = remoteId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.name = name;
        this.isActive = isActive;
        this.company = company;
        this.daysUntilDue = daysUntilDue;
        this.discountDays = discountDays;
        this.remoteLastModifiedAt = remoteLastModifiedAt;
        this.fieldMappings = fieldMappings;
        this.remoteData = remoteData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The third-party API ID of the matching object.
     */
    @JsonProperty("remote_id")
    public Optional<String> getRemoteId() {
        return remoteId;
    }

    /**
     * @return The datetime that this object was created by Merge.
     */
    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The datetime that this object was modified by Merge.
     */
    @JsonProperty("modified_at")
    public Optional<OffsetDateTime> getModifiedAt() {
        return modifiedAt;
    }

    /**
     * @return The name of the payment term.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return <code>True</code> if the payment term is active, <code>False</code> if not.
     */
    @JsonProperty("is_active")
    public Optional<Boolean> getIsActive() {
        return isActive;
    }

    /**
     * @return The subsidiary that the payment term belongs to.
     */
    @JsonProperty("company")
    public Optional<PaymentTermCompany> getCompany() {
        return company;
    }

    /**
     * @return The number of days after the invoice date that payment is due.
     */
    @JsonProperty("days_until_due")
    public Optional<Integer> getDaysUntilDue() {
        return daysUntilDue;
    }

    /**
     * @return The number of days the invoice must be paid before discounts expire.
     */
    @JsonProperty("discount_days")
    public Optional<Integer> getDiscountDays() {
        return discountDays;
    }

    /**
     * @return When the third party's payment term was modified.
     */
    @JsonProperty("remote_last_modified_at")
    public Optional<OffsetDateTime> getRemoteLastModifiedAt() {
        return remoteLastModifiedAt;
    }

    @JsonProperty("field_mappings")
    public Optional<Map<String, JsonNode>> getFieldMappings() {
        return fieldMappings;
    }

    @JsonProperty("remote_data")
    public Optional<List<RemoteData>> getRemoteData() {
        return remoteData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentTerm && equalTo((PaymentTerm) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentTerm other) {
        return id.equals(other.id)
                && remoteId.equals(other.remoteId)
                && createdAt.equals(other.createdAt)
                && modifiedAt.equals(other.modifiedAt)
                && name.equals(other.name)
                && isActive.equals(other.isActive)
                && company.equals(other.company)
                && daysUntilDue.equals(other.daysUntilDue)
                && discountDays.equals(other.discountDays)
                && remoteLastModifiedAt.equals(other.remoteLastModifiedAt)
                && fieldMappings.equals(other.fieldMappings)
                && remoteData.equals(other.remoteData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.remoteId,
                this.createdAt,
                this.modifiedAt,
                this.name,
                this.isActive,
                this.company,
                this.daysUntilDue,
                this.discountDays,
                this.remoteLastModifiedAt,
                this.fieldMappings,
                this.remoteData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(PaymentTerm other);
    }

    public interface _FinalStage {
        PaymentTerm build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage remoteId(Optional<String> remoteId);

        _FinalStage remoteId(String remoteId);

        _FinalStage createdAt(Optional<OffsetDateTime> createdAt);

        _FinalStage createdAt(OffsetDateTime createdAt);

        _FinalStage modifiedAt(Optional<OffsetDateTime> modifiedAt);

        _FinalStage modifiedAt(OffsetDateTime modifiedAt);

        _FinalStage isActive(Optional<Boolean> isActive);

        _FinalStage isActive(Boolean isActive);

        _FinalStage company(Optional<PaymentTermCompany> company);

        _FinalStage company(PaymentTermCompany company);

        _FinalStage daysUntilDue(Optional<Integer> daysUntilDue);

        _FinalStage daysUntilDue(Integer daysUntilDue);

        _FinalStage discountDays(Optional<Integer> discountDays);

        _FinalStage discountDays(Integer discountDays);

        _FinalStage remoteLastModifiedAt(Optional<OffsetDateTime> remoteLastModifiedAt);

        _FinalStage remoteLastModifiedAt(OffsetDateTime remoteLastModifiedAt);

        _FinalStage fieldMappings(Optional<Map<String, JsonNode>> fieldMappings);

        _FinalStage fieldMappings(Map<String, JsonNode> fieldMappings);

        _FinalStage remoteData(Optional<List<RemoteData>> remoteData);

        _FinalStage remoteData(List<RemoteData> remoteData);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<List<RemoteData>> remoteData = Optional.empty();

        private Optional<Map<String, JsonNode>> fieldMappings = Optional.empty();

        private Optional<OffsetDateTime> remoteLastModifiedAt = Optional.empty();

        private Optional<Integer> discountDays = Optional.empty();

        private Optional<Integer> daysUntilDue = Optional.empty();

        private Optional<PaymentTermCompany> company = Optional.empty();

        private Optional<Boolean> isActive = Optional.empty();

        private Optional<OffsetDateTime> modifiedAt = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> remoteId = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentTerm other) {
            id(other.getId());
            remoteId(other.getRemoteId());
            createdAt(other.getCreatedAt());
            modifiedAt(other.getModifiedAt());
            name(other.getName());
            isActive(other.getIsActive());
            company(other.getCompany());
            daysUntilDue(other.getDaysUntilDue());
            discountDays(other.getDiscountDays());
            remoteLastModifiedAt(other.getRemoteLastModifiedAt());
            fieldMappings(other.getFieldMappings());
            remoteData(other.getRemoteData());
            return this;
        }

        /**
         * <p>The name of the payment term.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public _FinalStage remoteData(List<RemoteData> remoteData) {
            this.remoteData = Optional.ofNullable(remoteData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remote_data", nulls = Nulls.SKIP)
        public _FinalStage remoteData(Optional<List<RemoteData>> remoteData) {
            this.remoteData = remoteData;
            return this;
        }

        @java.lang.Override
        public _FinalStage fieldMappings(Map<String, JsonNode> fieldMappings) {
            this.fieldMappings = Optional.ofNullable(fieldMappings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "field_mappings", nulls = Nulls.SKIP)
        public _FinalStage fieldMappings(Optional<Map<String, JsonNode>> fieldMappings) {
            this.fieldMappings = fieldMappings;
            return this;
        }

        /**
         * <p>When the third party's payment term was modified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage remoteLastModifiedAt(OffsetDateTime remoteLastModifiedAt) {
            this.remoteLastModifiedAt = Optional.ofNullable(remoteLastModifiedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remote_last_modified_at", nulls = Nulls.SKIP)
        public _FinalStage remoteLastModifiedAt(Optional<OffsetDateTime> remoteLastModifiedAt) {
            this.remoteLastModifiedAt = remoteLastModifiedAt;
            return this;
        }

        /**
         * <p>The number of days the invoice must be paid before discounts expire.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage discountDays(Integer discountDays) {
            this.discountDays = Optional.ofNullable(discountDays);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "discount_days", nulls = Nulls.SKIP)
        public _FinalStage discountDays(Optional<Integer> discountDays) {
            this.discountDays = discountDays;
            return this;
        }

        /**
         * <p>The number of days after the invoice date that payment is due.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage daysUntilDue(Integer daysUntilDue) {
            this.daysUntilDue = Optional.ofNullable(daysUntilDue);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "days_until_due", nulls = Nulls.SKIP)
        public _FinalStage daysUntilDue(Optional<Integer> daysUntilDue) {
            this.daysUntilDue = daysUntilDue;
            return this;
        }

        /**
         * <p>The subsidiary that the payment term belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage company(PaymentTermCompany company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public _FinalStage company(Optional<PaymentTermCompany> company) {
            this.company = company;
            return this;
        }

        /**
         * <p><code>True</code> if the payment term is active, <code>False</code> if not.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isActive(Boolean isActive) {
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_active", nulls = Nulls.SKIP)
        public _FinalStage isActive(Optional<Boolean> isActive) {
            this.isActive = isActive;
            return this;
        }

        /**
         * <p>The datetime that this object was modified by Merge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = Optional.ofNullable(modifiedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "modified_at", nulls = Nulls.SKIP)
        public _FinalStage modifiedAt(Optional<OffsetDateTime> modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }

        /**
         * <p>The datetime that this object was created by Merge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The third-party API ID of the matching object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage remoteId(String remoteId) {
            this.remoteId = Optional.ofNullable(remoteId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remote_id", nulls = Nulls.SKIP)
        public _FinalStage remoteId(Optional<String> remoteId) {
            this.remoteId = remoteId;
            return this;
        }

        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public PaymentTerm build() {
            return new PaymentTerm(
                    id,
                    remoteId,
                    createdAt,
                    modifiedAt,
                    name,
                    isActive,
                    company,
                    daysUntilDue,
                    discountDays,
                    remoteLastModifiedAt,
                    fieldMappings,
                    remoteData,
                    additionalProperties);
        }
    }
}
