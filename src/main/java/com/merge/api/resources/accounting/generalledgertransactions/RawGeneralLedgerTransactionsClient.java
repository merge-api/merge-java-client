/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.resources.accounting.generalledgertransactions;

import com.merge.api.core.ApiError;
import com.merge.api.core.ClientOptions;
import com.merge.api.core.MergeApiHttpResponse;
import com.merge.api.core.MergeException;
import com.merge.api.core.ObjectMappers;
import com.merge.api.core.QueryStringMapper;
import com.merge.api.core.RequestOptions;
import com.merge.api.resources.accounting.generalledgertransactions.requests.GeneralLedgerTransactionsListRequest;
import com.merge.api.resources.accounting.generalledgertransactions.requests.GeneralLedgerTransactionsRetrieveRequest;
import com.merge.api.resources.accounting.types.GeneralLedgerTransaction;
import com.merge.api.resources.accounting.types.PaginatedGeneralLedgerTransactionList;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawGeneralLedgerTransactionsClient {
    protected final ClientOptions clientOptions;

    public RawGeneralLedgerTransactionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns a list of <code>GeneralLedgerTransaction</code> objects.
     */
    public MergeApiHttpResponse<PaginatedGeneralLedgerTransactionList> list() {
        return list(GeneralLedgerTransactionsListRequest.builder().build());
    }

    /**
     * Returns a list of <code>GeneralLedgerTransaction</code> objects.
     */
    public MergeApiHttpResponse<PaginatedGeneralLedgerTransactionList> list(
            GeneralLedgerTransactionsListRequest request) {
        return list(request, null);
    }

    /**
     * Returns a list of <code>GeneralLedgerTransaction</code> objects.
     */
    public MergeApiHttpResponse<PaginatedGeneralLedgerTransactionList> list(
            GeneralLedgerTransactionsListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("accounting/v1/general-ledger-transactions");
        if (request.getCompanyId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "company_id", request.getCompanyId().get(), false);
        }
        if (request.getCreatedAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "created_after", request.getCreatedAfter().get().toString(), false);
        }
        if (request.getCreatedBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "created_before", request.getCreatedBefore().get().toString(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getExpand().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "expand", request.getExpand().get().toString(), false);
        }
        if (request.getIncludeDeletedData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_deleted_data",
                    request.getIncludeDeletedData().get().toString(),
                    false);
        }
        if (request.getIncludeRemoteData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_remote_data",
                    request.getIncludeRemoteData().get().toString(),
                    false);
        }
        if (request.getIncludeShellData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_shell_data",
                    request.getIncludeShellData().get().toString(),
                    false);
        }
        if (request.getModifiedAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "modified_after", request.getModifiedAfter().get().toString(), false);
        }
        if (request.getModifiedBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "modified_before",
                    request.getModifiedBefore().get().toString(),
                    false);
        }
        if (request.getPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page_size", request.getPageSize().get().toString(), false);
        }
        if (request.getPostedDateAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "posted_date_after",
                    request.getPostedDateAfter().get().toString(),
                    false);
        }
        if (request.getPostedDateBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "posted_date_before",
                    request.getPostedDateBefore().get().toString(),
                    false);
        }
        if (request.getRemoteId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "remote_id", request.getRemoteId().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MergeApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaginatedGeneralLedgerTransactionList.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns a <code>GeneralLedgerTransaction</code> object with the given <code>id</code>.
     */
    public MergeApiHttpResponse<GeneralLedgerTransaction> retrieve(String id) {
        return retrieve(id, GeneralLedgerTransactionsRetrieveRequest.builder().build());
    }

    /**
     * Returns a <code>GeneralLedgerTransaction</code> object with the given <code>id</code>.
     */
    public MergeApiHttpResponse<GeneralLedgerTransaction> retrieve(
            String id, GeneralLedgerTransactionsRetrieveRequest request) {
        return retrieve(id, request, null);
    }

    /**
     * Returns a <code>GeneralLedgerTransaction</code> object with the given <code>id</code>.
     */
    public MergeApiHttpResponse<GeneralLedgerTransaction> retrieve(
            String id, GeneralLedgerTransactionsRetrieveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("accounting/v1/general-ledger-transactions")
                .addPathSegment(id);
        if (request.getExpand().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "expand", request.getExpand().get().toString(), false);
        }
        if (request.getIncludeRemoteData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_remote_data",
                    request.getIncludeRemoteData().get().toString(),
                    false);
        }
        if (request.getIncludeShellData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_shell_data",
                    request.getIncludeShellData().get().toString(),
                    false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MergeApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GeneralLedgerTransaction.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }
}
