/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.resources.hris;

import com.merge.api.core.ClientOptions;
import com.merge.api.core.Suppliers;
import com.merge.api.resources.hris.accountdetails.AsyncAccountDetailsClient;
import com.merge.api.resources.hris.accounttoken.AsyncAccountTokenClient;
import com.merge.api.resources.hris.asyncpassthrough.AsyncAsyncPassthroughClient;
import com.merge.api.resources.hris.audittrail.AsyncAuditTrailClient;
import com.merge.api.resources.hris.availableactions.AsyncAvailableActionsClient;
import com.merge.api.resources.hris.bankinfo.AsyncBankInfoClient;
import com.merge.api.resources.hris.benefits.AsyncBenefitsClient;
import com.merge.api.resources.hris.companies.AsyncCompaniesClient;
import com.merge.api.resources.hris.deleteaccount.AsyncDeleteAccountClient;
import com.merge.api.resources.hris.dependents.AsyncDependentsClient;
import com.merge.api.resources.hris.employeepayrollruns.AsyncEmployeePayrollRunsClient;
import com.merge.api.resources.hris.employees.AsyncEmployeesClient;
import com.merge.api.resources.hris.employerbenefits.AsyncEmployerBenefitsClient;
import com.merge.api.resources.hris.employments.AsyncEmploymentsClient;
import com.merge.api.resources.hris.fieldmapping.AsyncFieldMappingClient;
import com.merge.api.resources.hris.forceresync.AsyncForceResyncClient;
import com.merge.api.resources.hris.generatekey.AsyncGenerateKeyClient;
import com.merge.api.resources.hris.groups.AsyncGroupsClient;
import com.merge.api.resources.hris.issues.AsyncIssuesClient;
import com.merge.api.resources.hris.linkedaccounts.AsyncLinkedAccountsClient;
import com.merge.api.resources.hris.linktoken.AsyncLinkTokenClient;
import com.merge.api.resources.hris.locations.AsyncLocationsClient;
import com.merge.api.resources.hris.passthrough.AsyncPassthroughClient;
import com.merge.api.resources.hris.paygroups.AsyncPayGroupsClient;
import com.merge.api.resources.hris.payrollruns.AsyncPayrollRunsClient;
import com.merge.api.resources.hris.regeneratekey.AsyncRegenerateKeyClient;
import com.merge.api.resources.hris.scopes.AsyncScopesClient;
import com.merge.api.resources.hris.syncstatus.AsyncSyncStatusClient;
import com.merge.api.resources.hris.teams.AsyncTeamsClient;
import com.merge.api.resources.hris.timeoff.AsyncTimeOffClient;
import com.merge.api.resources.hris.timeoffbalances.AsyncTimeOffBalancesClient;
import com.merge.api.resources.hris.timesheetentries.AsyncTimesheetEntriesClient;
import com.merge.api.resources.hris.webhookreceivers.AsyncWebhookReceiversClient;
import java.util.function.Supplier;

public class AsyncHrisClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AsyncAccountDetailsClient> accountDetailsClient;

    protected final Supplier<AsyncAccountTokenClient> accountTokenClient;

    protected final Supplier<AsyncAsyncPassthroughClient> asyncPassthroughClient;

    protected final Supplier<AsyncAuditTrailClient> auditTrailClient;

    protected final Supplier<AsyncAvailableActionsClient> availableActionsClient;

    protected final Supplier<AsyncBankInfoClient> bankInfoClient;

    protected final Supplier<AsyncBenefitsClient> benefitsClient;

    protected final Supplier<AsyncCompaniesClient> companiesClient;

    protected final Supplier<AsyncScopesClient> scopesClient;

    protected final Supplier<AsyncDeleteAccountClient> deleteAccountClient;

    protected final Supplier<AsyncDependentsClient> dependentsClient;

    protected final Supplier<AsyncEmployeePayrollRunsClient> employeePayrollRunsClient;

    protected final Supplier<AsyncEmployeesClient> employeesClient;

    protected final Supplier<AsyncEmployerBenefitsClient> employerBenefitsClient;

    protected final Supplier<AsyncEmploymentsClient> employmentsClient;

    protected final Supplier<AsyncFieldMappingClient> fieldMappingClient;

    protected final Supplier<AsyncGenerateKeyClient> generateKeyClient;

    protected final Supplier<AsyncGroupsClient> groupsClient;

    protected final Supplier<AsyncIssuesClient> issuesClient;

    protected final Supplier<AsyncLinkTokenClient> linkTokenClient;

    protected final Supplier<AsyncLinkedAccountsClient> linkedAccountsClient;

    protected final Supplier<AsyncLocationsClient> locationsClient;

    protected final Supplier<AsyncPassthroughClient> passthroughClient;

    protected final Supplier<AsyncPayGroupsClient> payGroupsClient;

    protected final Supplier<AsyncPayrollRunsClient> payrollRunsClient;

    protected final Supplier<AsyncRegenerateKeyClient> regenerateKeyClient;

    protected final Supplier<AsyncSyncStatusClient> syncStatusClient;

    protected final Supplier<AsyncForceResyncClient> forceResyncClient;

    protected final Supplier<AsyncTeamsClient> teamsClient;

    protected final Supplier<AsyncTimeOffClient> timeOffClient;

    protected final Supplier<AsyncTimeOffBalancesClient> timeOffBalancesClient;

    protected final Supplier<AsyncTimesheetEntriesClient> timesheetEntriesClient;

    protected final Supplier<AsyncWebhookReceiversClient> webhookReceiversClient;

    public AsyncHrisClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.accountDetailsClient = Suppliers.memoize(() -> new AsyncAccountDetailsClient(clientOptions));
        this.accountTokenClient = Suppliers.memoize(() -> new AsyncAccountTokenClient(clientOptions));
        this.asyncPassthroughClient = Suppliers.memoize(() -> new AsyncAsyncPassthroughClient(clientOptions));
        this.auditTrailClient = Suppliers.memoize(() -> new AsyncAuditTrailClient(clientOptions));
        this.availableActionsClient = Suppliers.memoize(() -> new AsyncAvailableActionsClient(clientOptions));
        this.bankInfoClient = Suppliers.memoize(() -> new AsyncBankInfoClient(clientOptions));
        this.benefitsClient = Suppliers.memoize(() -> new AsyncBenefitsClient(clientOptions));
        this.companiesClient = Suppliers.memoize(() -> new AsyncCompaniesClient(clientOptions));
        this.scopesClient = Suppliers.memoize(() -> new AsyncScopesClient(clientOptions));
        this.deleteAccountClient = Suppliers.memoize(() -> new AsyncDeleteAccountClient(clientOptions));
        this.dependentsClient = Suppliers.memoize(() -> new AsyncDependentsClient(clientOptions));
        this.employeePayrollRunsClient = Suppliers.memoize(() -> new AsyncEmployeePayrollRunsClient(clientOptions));
        this.employeesClient = Suppliers.memoize(() -> new AsyncEmployeesClient(clientOptions));
        this.employerBenefitsClient = Suppliers.memoize(() -> new AsyncEmployerBenefitsClient(clientOptions));
        this.employmentsClient = Suppliers.memoize(() -> new AsyncEmploymentsClient(clientOptions));
        this.fieldMappingClient = Suppliers.memoize(() -> new AsyncFieldMappingClient(clientOptions));
        this.generateKeyClient = Suppliers.memoize(() -> new AsyncGenerateKeyClient(clientOptions));
        this.groupsClient = Suppliers.memoize(() -> new AsyncGroupsClient(clientOptions));
        this.issuesClient = Suppliers.memoize(() -> new AsyncIssuesClient(clientOptions));
        this.linkTokenClient = Suppliers.memoize(() -> new AsyncLinkTokenClient(clientOptions));
        this.linkedAccountsClient = Suppliers.memoize(() -> new AsyncLinkedAccountsClient(clientOptions));
        this.locationsClient = Suppliers.memoize(() -> new AsyncLocationsClient(clientOptions));
        this.passthroughClient = Suppliers.memoize(() -> new AsyncPassthroughClient(clientOptions));
        this.payGroupsClient = Suppliers.memoize(() -> new AsyncPayGroupsClient(clientOptions));
        this.payrollRunsClient = Suppliers.memoize(() -> new AsyncPayrollRunsClient(clientOptions));
        this.regenerateKeyClient = Suppliers.memoize(() -> new AsyncRegenerateKeyClient(clientOptions));
        this.syncStatusClient = Suppliers.memoize(() -> new AsyncSyncStatusClient(clientOptions));
        this.forceResyncClient = Suppliers.memoize(() -> new AsyncForceResyncClient(clientOptions));
        this.teamsClient = Suppliers.memoize(() -> new AsyncTeamsClient(clientOptions));
        this.timeOffClient = Suppliers.memoize(() -> new AsyncTimeOffClient(clientOptions));
        this.timeOffBalancesClient = Suppliers.memoize(() -> new AsyncTimeOffBalancesClient(clientOptions));
        this.timesheetEntriesClient = Suppliers.memoize(() -> new AsyncTimesheetEntriesClient(clientOptions));
        this.webhookReceiversClient = Suppliers.memoize(() -> new AsyncWebhookReceiversClient(clientOptions));
    }

    public AsyncAccountDetailsClient accountDetails() {
        return this.accountDetailsClient.get();
    }

    public AsyncAccountTokenClient accountToken() {
        return this.accountTokenClient.get();
    }

    public AsyncAsyncPassthroughClient asyncPassthrough() {
        return this.asyncPassthroughClient.get();
    }

    public AsyncAuditTrailClient auditTrail() {
        return this.auditTrailClient.get();
    }

    public AsyncAvailableActionsClient availableActions() {
        return this.availableActionsClient.get();
    }

    public AsyncBankInfoClient bankInfo() {
        return this.bankInfoClient.get();
    }

    public AsyncBenefitsClient benefits() {
        return this.benefitsClient.get();
    }

    public AsyncCompaniesClient companies() {
        return this.companiesClient.get();
    }

    public AsyncScopesClient scopes() {
        return this.scopesClient.get();
    }

    public AsyncDeleteAccountClient deleteAccount() {
        return this.deleteAccountClient.get();
    }

    public AsyncDependentsClient dependents() {
        return this.dependentsClient.get();
    }

    public AsyncEmployeePayrollRunsClient employeePayrollRuns() {
        return this.employeePayrollRunsClient.get();
    }

    public AsyncEmployeesClient employees() {
        return this.employeesClient.get();
    }

    public AsyncEmployerBenefitsClient employerBenefits() {
        return this.employerBenefitsClient.get();
    }

    public AsyncEmploymentsClient employments() {
        return this.employmentsClient.get();
    }

    public AsyncFieldMappingClient fieldMapping() {
        return this.fieldMappingClient.get();
    }

    public AsyncGenerateKeyClient generateKey() {
        return this.generateKeyClient.get();
    }

    public AsyncGroupsClient groups() {
        return this.groupsClient.get();
    }

    public AsyncIssuesClient issues() {
        return this.issuesClient.get();
    }

    public AsyncLinkTokenClient linkToken() {
        return this.linkTokenClient.get();
    }

    public AsyncLinkedAccountsClient linkedAccounts() {
        return this.linkedAccountsClient.get();
    }

    public AsyncLocationsClient locations() {
        return this.locationsClient.get();
    }

    public AsyncPassthroughClient passthrough() {
        return this.passthroughClient.get();
    }

    public AsyncPayGroupsClient payGroups() {
        return this.payGroupsClient.get();
    }

    public AsyncPayrollRunsClient payrollRuns() {
        return this.payrollRunsClient.get();
    }

    public AsyncRegenerateKeyClient regenerateKey() {
        return this.regenerateKeyClient.get();
    }

    public AsyncSyncStatusClient syncStatus() {
        return this.syncStatusClient.get();
    }

    public AsyncForceResyncClient forceResync() {
        return this.forceResyncClient.get();
    }

    public AsyncTeamsClient teams() {
        return this.teamsClient.get();
    }

    public AsyncTimeOffClient timeOff() {
        return this.timeOffClient.get();
    }

    public AsyncTimeOffBalancesClient timeOffBalances() {
        return this.timeOffBalancesClient.get();
    }

    public AsyncTimesheetEntriesClient timesheetEntries() {
        return this.timesheetEntriesClient.get();
    }

    public AsyncWebhookReceiversClient webhookReceivers() {
        return this.webhookReceiversClient.get();
    }
}
