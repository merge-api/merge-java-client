/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.resources.crm.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AccountToken.Builder.class)
public final class AccountToken {
    private final String accountToken;

    private final AccountIntegration integration;

    private final Map<String, Object> additionalProperties;

    private AccountToken(
            String accountToken, AccountIntegration integration, Map<String, Object> additionalProperties) {
        this.accountToken = accountToken;
        this.integration = integration;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("account_token")
    public String getAccountToken() {
        return accountToken;
    }

    @JsonProperty("integration")
    public AccountIntegration getIntegration() {
        return integration;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccountToken && equalTo((AccountToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccountToken other) {
        return accountToken.equals(other.accountToken) && integration.equals(other.integration);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountToken, this.integration);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountTokenStage builder() {
        return new Builder();
    }

    public interface AccountTokenStage {
        IntegrationStage accountToken(@NotNull String accountToken);

        Builder from(AccountToken other);
    }

    public interface IntegrationStage {
        _FinalStage integration(@NotNull AccountIntegration integration);
    }

    public interface _FinalStage {
        AccountToken build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccountTokenStage, IntegrationStage, _FinalStage {
        private String accountToken;

        private AccountIntegration integration;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AccountToken other) {
            accountToken(other.getAccountToken());
            integration(other.getIntegration());
            return this;
        }

        @java.lang.Override
        @JsonSetter("account_token")
        public IntegrationStage accountToken(@NotNull String accountToken) {
            this.accountToken = accountToken;
            return this;
        }

        @java.lang.Override
        @JsonSetter("integration")
        public _FinalStage integration(@NotNull AccountIntegration integration) {
            this.integration = integration;
            return this;
        }

        @java.lang.Override
        public AccountToken build() {
            return new AccountToken(accountToken, integration, additionalProperties);
        }
    }
}
