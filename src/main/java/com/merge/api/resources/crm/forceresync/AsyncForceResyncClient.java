/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.resources.crm.forceresync;

import com.merge.api.core.ClientOptions;
import com.merge.api.core.RequestOptions;
import com.merge.api.resources.crm.types.SyncStatus;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncForceResyncClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawForceResyncClient rawClient;

    public AsyncForceResyncClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawForceResyncClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawForceResyncClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Force re-sync of all models. This endpoint is available for monthly, quarterly, and highest sync frequency customers on the Professional or Enterprise plans. Doing so will consume a sync credit for the relevant linked account. Force re-syncs can also be triggered manually in the Merge Dashboard and is available for all customers.
     */
    public CompletableFuture<List<SyncStatus>> syncStatusResyncCreate() {
        return this.rawClient.syncStatusResyncCreate().thenApply(response -> response.body());
    }

    /**
     * Force re-sync of all models. This endpoint is available for monthly, quarterly, and highest sync frequency customers on the Professional or Enterprise plans. Doing so will consume a sync credit for the relevant linked account. Force re-syncs can also be triggered manually in the Merge Dashboard and is available for all customers.
     */
    public CompletableFuture<List<SyncStatus>> syncStatusResyncCreate(RequestOptions requestOptions) {
        return this.rawClient.syncStatusResyncCreate(requestOptions).thenApply(response -> response.body());
    }
}
