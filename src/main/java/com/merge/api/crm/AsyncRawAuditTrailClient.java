/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.crm;

import com.merge.api.core.ApiError;
import com.merge.api.core.ClientOptions;
import com.merge.api.core.MergeApiHttpResponse;
import com.merge.api.core.MergeException;
import com.merge.api.core.ObjectMappers;
import com.merge.api.core.QueryStringMapper;
import com.merge.api.core.RequestOptions;
import com.merge.api.core.SyncPagingIterable;
import com.merge.api.crm.types.AuditLogEvent;
import com.merge.api.crm.types.AuditTrailListRequest;
import com.merge.api.crm.types.PaginatedAuditLogEventList;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawAuditTrailClient {
    protected final ClientOptions clientOptions;

    public AsyncRawAuditTrailClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Gets a list of audit trail events.
     */
    public CompletableFuture<MergeApiHttpResponse<SyncPagingIterable<AuditLogEvent>>> list() {
        return list(AuditTrailListRequest.builder().build());
    }

    /**
     * Gets a list of audit trail events.
     */
    public CompletableFuture<MergeApiHttpResponse<SyncPagingIterable<AuditLogEvent>>> list(
            AuditTrailListRequest request) {
        return list(request, null);
    }

    /**
     * Gets a list of audit trail events.
     */
    public CompletableFuture<MergeApiHttpResponse<SyncPagingIterable<AuditLogEvent>>> list(
            AuditTrailListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("crm/v1/audit-trail");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "end_date", request.getEndDate().get(), false);
        }
        if (request.getEventType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "event_type", request.getEventType().get(), false);
        }
        if (request.getPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page_size", request.getPageSize().get().toString(), false);
        }
        if (request.getStartDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "start_date", request.getStartDate().get(), false);
        }
        if (request.getUserEmail().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "user_email", request.getUserEmail().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MergeApiHttpResponse<SyncPagingIterable<AuditLogEvent>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        PaginatedAuditLogEventList parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaginatedAuditLogEventList.class);
                        Optional<String> startingAfter = parsedResponse.getNext();
                        AuditTrailListRequest nextRequest = AuditTrailListRequest.builder()
                                .from(request)
                                .cursor(startingAfter)
                                .build();
                        List<AuditLogEvent> result = parsedResponse.getResults().orElse(Collections.emptyList());
                        future.complete(new MergeApiHttpResponse<>(
                                new SyncPagingIterable<AuditLogEvent>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return list(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new ApiError(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MergeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MergeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
