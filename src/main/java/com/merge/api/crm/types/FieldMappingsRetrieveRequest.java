/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.crm.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FieldMappingsRetrieveRequest.Builder.class)
public final class FieldMappingsRetrieveRequest {
    private final Optional<Boolean> excludeRemoteFieldMetadata;

    private final Map<String, Object> additionalProperties;

    private FieldMappingsRetrieveRequest(
            Optional<Boolean> excludeRemoteFieldMetadata, Map<String, Object> additionalProperties) {
        this.excludeRemoteFieldMetadata = excludeRemoteFieldMetadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If <code>true</code>, remote fields metadata is excluded from each field mapping instance (i.e. <code>remote_fields.remote_key_name</code> and <code>remote_fields.schema</code> will be null). This will increase the speed of the request since these fields require some calculations.
     */
    @JsonProperty("exclude_remote_field_metadata")
    public Optional<Boolean> getExcludeRemoteFieldMetadata() {
        return excludeRemoteFieldMetadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FieldMappingsRetrieveRequest && equalTo((FieldMappingsRetrieveRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FieldMappingsRetrieveRequest other) {
        return excludeRemoteFieldMetadata.equals(other.excludeRemoteFieldMetadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.excludeRemoteFieldMetadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> excludeRemoteFieldMetadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FieldMappingsRetrieveRequest other) {
            excludeRemoteFieldMetadata(other.getExcludeRemoteFieldMetadata());
            return this;
        }

        /**
         * <p>If <code>true</code>, remote fields metadata is excluded from each field mapping instance (i.e. <code>remote_fields.remote_key_name</code> and <code>remote_fields.schema</code> will be null). This will increase the speed of the request since these fields require some calculations.</p>
         */
        @JsonSetter(value = "exclude_remote_field_metadata", nulls = Nulls.SKIP)
        public Builder excludeRemoteFieldMetadata(Optional<Boolean> excludeRemoteFieldMetadata) {
            this.excludeRemoteFieldMetadata = excludeRemoteFieldMetadata;
            return this;
        }

        public Builder excludeRemoteFieldMetadata(Boolean excludeRemoteFieldMetadata) {
            this.excludeRemoteFieldMetadata = Optional.ofNullable(excludeRemoteFieldMetadata);
            return this;
        }

        public FieldMappingsRetrieveRequest build() {
            return new FieldMappingsRetrieveRequest(excludeRemoteFieldMetadata, additionalProperties);
        }
    }
}
