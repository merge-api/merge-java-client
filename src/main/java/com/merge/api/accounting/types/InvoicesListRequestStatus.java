/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.accounting.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class InvoicesListRequestStatus {
    public static final InvoicesListRequestStatus PARTIALLY_PAID =
            new InvoicesListRequestStatus(Value.PARTIALLY_PAID, "PARTIALLY_PAID");

    public static final InvoicesListRequestStatus SUBMITTED =
            new InvoicesListRequestStatus(Value.SUBMITTED, "SUBMITTED");

    public static final InvoicesListRequestStatus DRAFT = new InvoicesListRequestStatus(Value.DRAFT, "DRAFT");

    public static final InvoicesListRequestStatus PAID = new InvoicesListRequestStatus(Value.PAID, "PAID");

    public static final InvoicesListRequestStatus OPEN = new InvoicesListRequestStatus(Value.OPEN, "OPEN");

    public static final InvoicesListRequestStatus VOID = new InvoicesListRequestStatus(Value.VOID, "VOID");

    private final Value value;

    private final String string;

    InvoicesListRequestStatus(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof InvoicesListRequestStatus
                        && this.string.equals(((InvoicesListRequestStatus) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case PARTIALLY_PAID:
                return visitor.visitPartiallyPaid();
            case SUBMITTED:
                return visitor.visitSubmitted();
            case DRAFT:
                return visitor.visitDraft();
            case PAID:
                return visitor.visitPaid();
            case OPEN:
                return visitor.visitOpen();
            case VOID:
                return visitor.visitVoid();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static InvoicesListRequestStatus valueOf(String value) {
        switch (value) {
            case "PARTIALLY_PAID":
                return PARTIALLY_PAID;
            case "SUBMITTED":
                return SUBMITTED;
            case "DRAFT":
                return DRAFT;
            case "PAID":
                return PAID;
            case "OPEN":
                return OPEN;
            case "VOID":
                return VOID;
            default:
                return new InvoicesListRequestStatus(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        DRAFT,

        OPEN,

        PAID,

        PARTIALLY_PAID,

        SUBMITTED,

        VOID,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitDraft();

        T visitOpen();

        T visitPaid();

        T visitPartiallyPaid();

        T visitSubmitted();

        T visitVoid();

        T visitUnknown(String unknownType);
    }
}
