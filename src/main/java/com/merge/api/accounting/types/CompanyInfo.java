/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.accounting.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CompanyInfo.Builder.class)
public final class CompanyInfo {
    private final Optional<String> id;

    private final Optional<String> remoteId;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> modifiedAt;

    private final Optional<String> name;

    private final Optional<String> legalName;

    private final Optional<String> taxNumber;

    private final Optional<Integer> fiscalYearEndMonth;

    private final Optional<Integer> fiscalYearEndDay;

    private final Optional<JsonNode> currency;

    private final Optional<OffsetDateTime> remoteCreatedAt;

    private final Optional<List<Optional<String>>> urls;

    private final Optional<List<Address>> addresses;

    private final Optional<List<AccountingPhoneNumber>> phoneNumbers;

    private final Optional<Boolean> remoteWasDeleted;

    private final Optional<Map<String, JsonNode>> fieldMappings;

    private final Optional<List<RemoteData>> remoteData;

    private final Map<String, Object> additionalProperties;

    private CompanyInfo(
            Optional<String> id,
            Optional<String> remoteId,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> modifiedAt,
            Optional<String> name,
            Optional<String> legalName,
            Optional<String> taxNumber,
            Optional<Integer> fiscalYearEndMonth,
            Optional<Integer> fiscalYearEndDay,
            Optional<JsonNode> currency,
            Optional<OffsetDateTime> remoteCreatedAt,
            Optional<List<Optional<String>>> urls,
            Optional<List<Address>> addresses,
            Optional<List<AccountingPhoneNumber>> phoneNumbers,
            Optional<Boolean> remoteWasDeleted,
            Optional<Map<String, JsonNode>> fieldMappings,
            Optional<List<RemoteData>> remoteData,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.remoteId = remoteId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.name = name;
        this.legalName = legalName;
        this.taxNumber = taxNumber;
        this.fiscalYearEndMonth = fiscalYearEndMonth;
        this.fiscalYearEndDay = fiscalYearEndDay;
        this.currency = currency;
        this.remoteCreatedAt = remoteCreatedAt;
        this.urls = urls;
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.remoteWasDeleted = remoteWasDeleted;
        this.fieldMappings = fieldMappings;
        this.remoteData = remoteData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The third-party API ID of the matching object.
     */
    @JsonProperty("remote_id")
    public Optional<String> getRemoteId() {
        return remoteId;
    }

    /**
     * @return The datetime that this object was created by Merge.
     */
    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The datetime that this object was modified by Merge.
     */
    @JsonProperty("modified_at")
    public Optional<OffsetDateTime> getModifiedAt() {
        return modifiedAt;
    }

    /**
     * @return The company's name.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The company's legal name.
     */
    @JsonProperty("legal_name")
    public Optional<String> getLegalName() {
        return legalName;
    }

    /**
     * @return The company's tax number.
     */
    @JsonProperty("tax_number")
    public Optional<String> getTaxNumber() {
        return taxNumber;
    }

    /**
     * @return The company's fiscal year end month.
     */
    @JsonProperty("fiscal_year_end_month")
    public Optional<Integer> getFiscalYearEndMonth() {
        return fiscalYearEndMonth;
    }

    /**
     * @return The company's fiscal year end day.
     */
    @JsonProperty("fiscal_year_end_day")
    public Optional<Integer> getFiscalYearEndDay() {
        return fiscalYearEndDay;
    }

    @JsonProperty("currency")
    public Optional<JsonNode> getCurrency() {
        return currency;
    }

    /**
     * @return When the third party's company was created.
     */
    @JsonProperty("remote_created_at")
    public Optional<OffsetDateTime> getRemoteCreatedAt() {
        return remoteCreatedAt;
    }

    /**
     * @return The company's urls.
     */
    @JsonProperty("urls")
    public Optional<List<Optional<String>>> getUrls() {
        return urls;
    }

    @JsonProperty("addresses")
    public Optional<List<Address>> getAddresses() {
        return addresses;
    }

    @JsonProperty("phone_numbers")
    public Optional<List<AccountingPhoneNumber>> getPhoneNumbers() {
        return phoneNumbers;
    }

    /**
     * @return Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. <a href="https://docs.merge.dev/integrations/hris/supported-features/">Learn more</a>.
     */
    @JsonProperty("remote_was_deleted")
    public Optional<Boolean> getRemoteWasDeleted() {
        return remoteWasDeleted;
    }

    @JsonProperty("field_mappings")
    public Optional<Map<String, JsonNode>> getFieldMappings() {
        return fieldMappings;
    }

    @JsonProperty("remote_data")
    public Optional<List<RemoteData>> getRemoteData() {
        return remoteData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompanyInfo && equalTo((CompanyInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompanyInfo other) {
        return id.equals(other.id)
                && remoteId.equals(other.remoteId)
                && createdAt.equals(other.createdAt)
                && modifiedAt.equals(other.modifiedAt)
                && name.equals(other.name)
                && legalName.equals(other.legalName)
                && taxNumber.equals(other.taxNumber)
                && fiscalYearEndMonth.equals(other.fiscalYearEndMonth)
                && fiscalYearEndDay.equals(other.fiscalYearEndDay)
                && currency.equals(other.currency)
                && remoteCreatedAt.equals(other.remoteCreatedAt)
                && urls.equals(other.urls)
                && addresses.equals(other.addresses)
                && phoneNumbers.equals(other.phoneNumbers)
                && remoteWasDeleted.equals(other.remoteWasDeleted)
                && fieldMappings.equals(other.fieldMappings)
                && remoteData.equals(other.remoteData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.remoteId,
                this.createdAt,
                this.modifiedAt,
                this.name,
                this.legalName,
                this.taxNumber,
                this.fiscalYearEndMonth,
                this.fiscalYearEndDay,
                this.currency,
                this.remoteCreatedAt,
                this.urls,
                this.addresses,
                this.phoneNumbers,
                this.remoteWasDeleted,
                this.fieldMappings,
                this.remoteData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> remoteId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<OffsetDateTime> modifiedAt = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> legalName = Optional.empty();

        private Optional<String> taxNumber = Optional.empty();

        private Optional<Integer> fiscalYearEndMonth = Optional.empty();

        private Optional<Integer> fiscalYearEndDay = Optional.empty();

        private Optional<JsonNode> currency = Optional.empty();

        private Optional<OffsetDateTime> remoteCreatedAt = Optional.empty();

        private Optional<List<Optional<String>>> urls = Optional.empty();

        private Optional<List<Address>> addresses = Optional.empty();

        private Optional<List<AccountingPhoneNumber>> phoneNumbers = Optional.empty();

        private Optional<Boolean> remoteWasDeleted = Optional.empty();

        private Optional<Map<String, JsonNode>> fieldMappings = Optional.empty();

        private Optional<List<RemoteData>> remoteData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CompanyInfo other) {
            id(other.getId());
            remoteId(other.getRemoteId());
            createdAt(other.getCreatedAt());
            modifiedAt(other.getModifiedAt());
            name(other.getName());
            legalName(other.getLegalName());
            taxNumber(other.getTaxNumber());
            fiscalYearEndMonth(other.getFiscalYearEndMonth());
            fiscalYearEndDay(other.getFiscalYearEndDay());
            currency(other.getCurrency());
            remoteCreatedAt(other.getRemoteCreatedAt());
            urls(other.getUrls());
            addresses(other.getAddresses());
            phoneNumbers(other.getPhoneNumbers());
            remoteWasDeleted(other.getRemoteWasDeleted());
            fieldMappings(other.getFieldMappings());
            remoteData(other.getRemoteData());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The third-party API ID of the matching object.</p>
         */
        @JsonSetter(value = "remote_id", nulls = Nulls.SKIP)
        public Builder remoteId(Optional<String> remoteId) {
            this.remoteId = remoteId;
            return this;
        }

        public Builder remoteId(String remoteId) {
            this.remoteId = Optional.ofNullable(remoteId);
            return this;
        }

        /**
         * <p>The datetime that this object was created by Merge.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The datetime that this object was modified by Merge.</p>
         */
        @JsonSetter(value = "modified_at", nulls = Nulls.SKIP)
        public Builder modifiedAt(Optional<OffsetDateTime> modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }

        public Builder modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = Optional.ofNullable(modifiedAt);
            return this;
        }

        /**
         * <p>The company's name.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The company's legal name.</p>
         */
        @JsonSetter(value = "legal_name", nulls = Nulls.SKIP)
        public Builder legalName(Optional<String> legalName) {
            this.legalName = legalName;
            return this;
        }

        public Builder legalName(String legalName) {
            this.legalName = Optional.ofNullable(legalName);
            return this;
        }

        /**
         * <p>The company's tax number.</p>
         */
        @JsonSetter(value = "tax_number", nulls = Nulls.SKIP)
        public Builder taxNumber(Optional<String> taxNumber) {
            this.taxNumber = taxNumber;
            return this;
        }

        public Builder taxNumber(String taxNumber) {
            this.taxNumber = Optional.ofNullable(taxNumber);
            return this;
        }

        /**
         * <p>The company's fiscal year end month.</p>
         */
        @JsonSetter(value = "fiscal_year_end_month", nulls = Nulls.SKIP)
        public Builder fiscalYearEndMonth(Optional<Integer> fiscalYearEndMonth) {
            this.fiscalYearEndMonth = fiscalYearEndMonth;
            return this;
        }

        public Builder fiscalYearEndMonth(Integer fiscalYearEndMonth) {
            this.fiscalYearEndMonth = Optional.ofNullable(fiscalYearEndMonth);
            return this;
        }

        /**
         * <p>The company's fiscal year end day.</p>
         */
        @JsonSetter(value = "fiscal_year_end_day", nulls = Nulls.SKIP)
        public Builder fiscalYearEndDay(Optional<Integer> fiscalYearEndDay) {
            this.fiscalYearEndDay = fiscalYearEndDay;
            return this;
        }

        public Builder fiscalYearEndDay(Integer fiscalYearEndDay) {
            this.fiscalYearEndDay = Optional.ofNullable(fiscalYearEndDay);
            return this;
        }

        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public Builder currency(Optional<JsonNode> currency) {
            this.currency = currency;
            return this;
        }

        public Builder currency(JsonNode currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>When the third party's company was created.</p>
         */
        @JsonSetter(value = "remote_created_at", nulls = Nulls.SKIP)
        public Builder remoteCreatedAt(Optional<OffsetDateTime> remoteCreatedAt) {
            this.remoteCreatedAt = remoteCreatedAt;
            return this;
        }

        public Builder remoteCreatedAt(OffsetDateTime remoteCreatedAt) {
            this.remoteCreatedAt = Optional.ofNullable(remoteCreatedAt);
            return this;
        }

        /**
         * <p>The company's urls.</p>
         */
        @JsonSetter(value = "urls", nulls = Nulls.SKIP)
        public Builder urls(Optional<List<Optional<String>>> urls) {
            this.urls = urls;
            return this;
        }

        public Builder urls(List<Optional<String>> urls) {
            this.urls = Optional.ofNullable(urls);
            return this;
        }

        @JsonSetter(value = "addresses", nulls = Nulls.SKIP)
        public Builder addresses(Optional<List<Address>> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder addresses(List<Address> addresses) {
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        @JsonSetter(value = "phone_numbers", nulls = Nulls.SKIP)
        public Builder phoneNumbers(Optional<List<AccountingPhoneNumber>> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder phoneNumbers(List<AccountingPhoneNumber> phoneNumbers) {
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        /**
         * <p>Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. <a href="https://docs.merge.dev/integrations/hris/supported-features/">Learn more</a>.</p>
         */
        @JsonSetter(value = "remote_was_deleted", nulls = Nulls.SKIP)
        public Builder remoteWasDeleted(Optional<Boolean> remoteWasDeleted) {
            this.remoteWasDeleted = remoteWasDeleted;
            return this;
        }

        public Builder remoteWasDeleted(Boolean remoteWasDeleted) {
            this.remoteWasDeleted = Optional.ofNullable(remoteWasDeleted);
            return this;
        }

        @JsonSetter(value = "field_mappings", nulls = Nulls.SKIP)
        public Builder fieldMappings(Optional<Map<String, JsonNode>> fieldMappings) {
            this.fieldMappings = fieldMappings;
            return this;
        }

        public Builder fieldMappings(Map<String, JsonNode> fieldMappings) {
            this.fieldMappings = Optional.ofNullable(fieldMappings);
            return this;
        }

        @JsonSetter(value = "remote_data", nulls = Nulls.SKIP)
        public Builder remoteData(Optional<List<RemoteData>> remoteData) {
            this.remoteData = remoteData;
            return this;
        }

        public Builder remoteData(List<RemoteData> remoteData) {
            this.remoteData = Optional.ofNullable(remoteData);
            return this;
        }

        public CompanyInfo build() {
            return new CompanyInfo(
                    id,
                    remoteId,
                    createdAt,
                    modifiedAt,
                    name,
                    legalName,
                    taxNumber,
                    fiscalYearEndMonth,
                    fiscalYearEndDay,
                    currency,
                    remoteCreatedAt,
                    urls,
                    addresses,
                    phoneNumbers,
                    remoteWasDeleted,
                    fieldMappings,
                    remoteData,
                    additionalProperties);
        }
    }
}
