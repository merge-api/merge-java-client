/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.accounting.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PatchedItemRequestRequest.Builder.class)
public final class PatchedItemRequestRequest {
    private final Optional<String> name;

    private final Optional<PatchedItemRequestRequestStatus> status;

    private final Optional<Type2BbEnum> type;

    private final Optional<Double> unitPrice;

    private final Optional<Double> purchasePrice;

    private final Optional<String> purchaseAccount;

    private final Optional<String> salesAccount;

    private final Optional<String> company;

    private final Optional<String> purchaseTaxRate;

    private final Optional<String> salesTaxRate;

    private final Optional<Map<String, JsonNode>> integrationParams;

    private final Optional<Map<String, JsonNode>> linkedAccountParams;

    private final Map<String, Object> additionalProperties;

    private PatchedItemRequestRequest(
            Optional<String> name,
            Optional<PatchedItemRequestRequestStatus> status,
            Optional<Type2BbEnum> type,
            Optional<Double> unitPrice,
            Optional<Double> purchasePrice,
            Optional<String> purchaseAccount,
            Optional<String> salesAccount,
            Optional<String> company,
            Optional<String> purchaseTaxRate,
            Optional<String> salesTaxRate,
            Optional<Map<String, JsonNode>> integrationParams,
            Optional<Map<String, JsonNode>> linkedAccountParams,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.status = status;
        this.type = type;
        this.unitPrice = unitPrice;
        this.purchasePrice = purchasePrice;
        this.purchaseAccount = purchaseAccount;
        this.salesAccount = salesAccount;
        this.company = company;
        this.purchaseTaxRate = purchaseTaxRate;
        this.salesTaxRate = salesTaxRate;
        this.integrationParams = integrationParams;
        this.linkedAccountParams = linkedAccountParams;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The item's name.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The item's status.
     * <ul>
     * <li><code>ACTIVE</code> - ACTIVE</li>
     * <li><code>ARCHIVED</code> - ARCHIVED</li>
     * </ul>
     */
    @JsonProperty("status")
    public Optional<PatchedItemRequestRequestStatus> getStatus() {
        return status;
    }

    /**
     * @return The item's type.
     * <ul>
     * <li><code>INVENTORY</code> - INVENTORY</li>
     * <li><code>NON_INVENTORY</code> - NON_INVENTORY</li>
     * <li><code>SERVICE</code> - SERVICE</li>
     * <li><code>UNKNOWN</code> - UNKNOWN</li>
     * </ul>
     */
    @JsonProperty("type")
    public Optional<Type2BbEnum> getType() {
        return type;
    }

    /**
     * @return The item's unit price.
     */
    @JsonProperty("unit_price")
    public Optional<Double> getUnitPrice() {
        return unitPrice;
    }

    /**
     * @return The price at which the item is purchased from a vendor.
     */
    @JsonProperty("purchase_price")
    public Optional<Double> getPurchasePrice() {
        return purchasePrice;
    }

    /**
     * @return References the default account used to record a purchase of the item.
     */
    @JsonProperty("purchase_account")
    public Optional<String> getPurchaseAccount() {
        return purchaseAccount;
    }

    /**
     * @return References the default account used to record a sale.
     */
    @JsonProperty("sales_account")
    public Optional<String> getSalesAccount() {
        return salesAccount;
    }

    /**
     * @return The company the item belongs to.
     */
    @JsonProperty("company")
    public Optional<String> getCompany() {
        return company;
    }

    /**
     * @return The default purchase tax rate for this item.
     */
    @JsonProperty("purchase_tax_rate")
    public Optional<String> getPurchaseTaxRate() {
        return purchaseTaxRate;
    }

    /**
     * @return The default sales tax rate for this item.
     */
    @JsonProperty("sales_tax_rate")
    public Optional<String> getSalesTaxRate() {
        return salesTaxRate;
    }

    @JsonProperty("integration_params")
    public Optional<Map<String, JsonNode>> getIntegrationParams() {
        return integrationParams;
    }

    @JsonProperty("linked_account_params")
    public Optional<Map<String, JsonNode>> getLinkedAccountParams() {
        return linkedAccountParams;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PatchedItemRequestRequest && equalTo((PatchedItemRequestRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PatchedItemRequestRequest other) {
        return name.equals(other.name)
                && status.equals(other.status)
                && type.equals(other.type)
                && unitPrice.equals(other.unitPrice)
                && purchasePrice.equals(other.purchasePrice)
                && purchaseAccount.equals(other.purchaseAccount)
                && salesAccount.equals(other.salesAccount)
                && company.equals(other.company)
                && purchaseTaxRate.equals(other.purchaseTaxRate)
                && salesTaxRate.equals(other.salesTaxRate)
                && integrationParams.equals(other.integrationParams)
                && linkedAccountParams.equals(other.linkedAccountParams);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.status,
                this.type,
                this.unitPrice,
                this.purchasePrice,
                this.purchaseAccount,
                this.salesAccount,
                this.company,
                this.purchaseTaxRate,
                this.salesTaxRate,
                this.integrationParams,
                this.linkedAccountParams);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<PatchedItemRequestRequestStatus> status = Optional.empty();

        private Optional<Type2BbEnum> type = Optional.empty();

        private Optional<Double> unitPrice = Optional.empty();

        private Optional<Double> purchasePrice = Optional.empty();

        private Optional<String> purchaseAccount = Optional.empty();

        private Optional<String> salesAccount = Optional.empty();

        private Optional<String> company = Optional.empty();

        private Optional<String> purchaseTaxRate = Optional.empty();

        private Optional<String> salesTaxRate = Optional.empty();

        private Optional<Map<String, JsonNode>> integrationParams = Optional.empty();

        private Optional<Map<String, JsonNode>> linkedAccountParams = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PatchedItemRequestRequest other) {
            name(other.getName());
            status(other.getStatus());
            type(other.getType());
            unitPrice(other.getUnitPrice());
            purchasePrice(other.getPurchasePrice());
            purchaseAccount(other.getPurchaseAccount());
            salesAccount(other.getSalesAccount());
            company(other.getCompany());
            purchaseTaxRate(other.getPurchaseTaxRate());
            salesTaxRate(other.getSalesTaxRate());
            integrationParams(other.getIntegrationParams());
            linkedAccountParams(other.getLinkedAccountParams());
            return this;
        }

        /**
         * <p>The item's name.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The item's status.</p>
         * <ul>
         * <li><code>ACTIVE</code> - ACTIVE</li>
         * <li><code>ARCHIVED</code> - ARCHIVED</li>
         * </ul>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<PatchedItemRequestRequestStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(PatchedItemRequestRequestStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The item's type.</p>
         * <ul>
         * <li><code>INVENTORY</code> - INVENTORY</li>
         * <li><code>NON_INVENTORY</code> - NON_INVENTORY</li>
         * <li><code>SERVICE</code> - SERVICE</li>
         * <li><code>UNKNOWN</code> - UNKNOWN</li>
         * </ul>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<Type2BbEnum> type) {
            this.type = type;
            return this;
        }

        public Builder type(Type2BbEnum type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The item's unit price.</p>
         */
        @JsonSetter(value = "unit_price", nulls = Nulls.SKIP)
        public Builder unitPrice(Optional<Double> unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public Builder unitPrice(Double unitPrice) {
            this.unitPrice = Optional.ofNullable(unitPrice);
            return this;
        }

        /**
         * <p>The price at which the item is purchased from a vendor.</p>
         */
        @JsonSetter(value = "purchase_price", nulls = Nulls.SKIP)
        public Builder purchasePrice(Optional<Double> purchasePrice) {
            this.purchasePrice = purchasePrice;
            return this;
        }

        public Builder purchasePrice(Double purchasePrice) {
            this.purchasePrice = Optional.ofNullable(purchasePrice);
            return this;
        }

        /**
         * <p>References the default account used to record a purchase of the item.</p>
         */
        @JsonSetter(value = "purchase_account", nulls = Nulls.SKIP)
        public Builder purchaseAccount(Optional<String> purchaseAccount) {
            this.purchaseAccount = purchaseAccount;
            return this;
        }

        public Builder purchaseAccount(String purchaseAccount) {
            this.purchaseAccount = Optional.ofNullable(purchaseAccount);
            return this;
        }

        /**
         * <p>References the default account used to record a sale.</p>
         */
        @JsonSetter(value = "sales_account", nulls = Nulls.SKIP)
        public Builder salesAccount(Optional<String> salesAccount) {
            this.salesAccount = salesAccount;
            return this;
        }

        public Builder salesAccount(String salesAccount) {
            this.salesAccount = Optional.ofNullable(salesAccount);
            return this;
        }

        /**
         * <p>The company the item belongs to.</p>
         */
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public Builder company(Optional<String> company) {
            this.company = company;
            return this;
        }

        public Builder company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * <p>The default purchase tax rate for this item.</p>
         */
        @JsonSetter(value = "purchase_tax_rate", nulls = Nulls.SKIP)
        public Builder purchaseTaxRate(Optional<String> purchaseTaxRate) {
            this.purchaseTaxRate = purchaseTaxRate;
            return this;
        }

        public Builder purchaseTaxRate(String purchaseTaxRate) {
            this.purchaseTaxRate = Optional.ofNullable(purchaseTaxRate);
            return this;
        }

        /**
         * <p>The default sales tax rate for this item.</p>
         */
        @JsonSetter(value = "sales_tax_rate", nulls = Nulls.SKIP)
        public Builder salesTaxRate(Optional<String> salesTaxRate) {
            this.salesTaxRate = salesTaxRate;
            return this;
        }

        public Builder salesTaxRate(String salesTaxRate) {
            this.salesTaxRate = Optional.ofNullable(salesTaxRate);
            return this;
        }

        @JsonSetter(value = "integration_params", nulls = Nulls.SKIP)
        public Builder integrationParams(Optional<Map<String, JsonNode>> integrationParams) {
            this.integrationParams = integrationParams;
            return this;
        }

        public Builder integrationParams(Map<String, JsonNode> integrationParams) {
            this.integrationParams = Optional.ofNullable(integrationParams);
            return this;
        }

        @JsonSetter(value = "linked_account_params", nulls = Nulls.SKIP)
        public Builder linkedAccountParams(Optional<Map<String, JsonNode>> linkedAccountParams) {
            this.linkedAccountParams = linkedAccountParams;
            return this;
        }

        public Builder linkedAccountParams(Map<String, JsonNode> linkedAccountParams) {
            this.linkedAccountParams = Optional.ofNullable(linkedAccountParams);
            return this;
        }

        public PatchedItemRequestRequest build() {
            return new PatchedItemRequestRequest(
                    name,
                    status,
                    type,
                    unitPrice,
                    purchasePrice,
                    purchaseAccount,
                    salesAccount,
                    company,
                    purchaseTaxRate,
                    salesTaxRate,
                    integrationParams,
                    linkedAccountParams,
                    additionalProperties);
        }
    }
}
