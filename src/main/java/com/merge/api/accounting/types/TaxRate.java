/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.accounting.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaxRate.Builder.class)
public final class TaxRate {
    private final Optional<String> id;

    private final Optional<String> remoteId;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> modifiedAt;

    private final Optional<TaxRateCompany> company;

    private final Optional<String> code;

    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<TaxRateStatus> status;

    private final Optional<String> country;

    private final Optional<Double> totalTaxRate;

    private final Optional<Double> effectiveTaxRate;

    private final Optional<List<TaxRateTaxComponentsItem>> taxComponents;

    private final Optional<Boolean> remoteWasDeleted;

    private final Optional<Map<String, JsonNode>> fieldMappings;

    private final Optional<List<RemoteData>> remoteData;

    private final Map<String, Object> additionalProperties;

    private TaxRate(
            Optional<String> id,
            Optional<String> remoteId,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> modifiedAt,
            Optional<TaxRateCompany> company,
            Optional<String> code,
            Optional<String> name,
            Optional<String> description,
            Optional<TaxRateStatus> status,
            Optional<String> country,
            Optional<Double> totalTaxRate,
            Optional<Double> effectiveTaxRate,
            Optional<List<TaxRateTaxComponentsItem>> taxComponents,
            Optional<Boolean> remoteWasDeleted,
            Optional<Map<String, JsonNode>> fieldMappings,
            Optional<List<RemoteData>> remoteData,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.remoteId = remoteId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.company = company;
        this.code = code;
        this.name = name;
        this.description = description;
        this.status = status;
        this.country = country;
        this.totalTaxRate = totalTaxRate;
        this.effectiveTaxRate = effectiveTaxRate;
        this.taxComponents = taxComponents;
        this.remoteWasDeleted = remoteWasDeleted;
        this.fieldMappings = fieldMappings;
        this.remoteData = remoteData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The third-party API ID of the matching object.
     */
    @JsonProperty("remote_id")
    public Optional<String> getRemoteId() {
        return remoteId;
    }

    /**
     * @return The datetime that this object was created by Merge.
     */
    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The datetime that this object was modified by Merge.
     */
    @JsonProperty("modified_at")
    public Optional<OffsetDateTime> getModifiedAt() {
        return modifiedAt;
    }

    /**
     * @return The subsidiary that the tax rate belongs to (in the case of multi-entity systems).
     */
    @JsonProperty("company")
    public Optional<TaxRateCompany> getCompany() {
        return company;
    }

    /**
     * @return The tax code associated with this tax rate or group of tax rates from the third-party platform.
     */
    @JsonProperty("code")
    public Optional<String> getCode() {
        return code;
    }

    /**
     * @return The tax rate’s name.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The tax rate's description.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The tax rate’s status - <code>ACTIVE</code> if an active tax rate, <code>ARCHIVED</code> if not active.
     * <ul>
     * <li><code>ACTIVE</code> - ACTIVE</li>
     * <li><code>ARCHIVED</code> - ARCHIVED</li>
     * </ul>
     */
    @JsonProperty("status")
    public Optional<TaxRateStatus> getStatus() {
        return status;
    }

    /**
     * @return The country the tax rate is associated with.
     */
    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    /**
     * @return The tax’s total tax rate - sum of the tax components (not compounded).
     */
    @JsonProperty("total_tax_rate")
    public Optional<Double> getTotalTaxRate() {
        return totalTaxRate;
    }

    /**
     * @return The tax rate’s effective tax rate - total amount of tax with compounding.
     */
    @JsonProperty("effective_tax_rate")
    public Optional<Double> getEffectiveTaxRate() {
        return effectiveTaxRate;
    }

    /**
     * @return The related tax components of the tax rate.
     */
    @JsonProperty("tax_components")
    public Optional<List<TaxRateTaxComponentsItem>> getTaxComponents() {
        return taxComponents;
    }

    /**
     * @return Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. <a href="https://docs.merge.dev/integrations/hris/supported-features/">Learn more</a>.
     */
    @JsonProperty("remote_was_deleted")
    public Optional<Boolean> getRemoteWasDeleted() {
        return remoteWasDeleted;
    }

    @JsonProperty("field_mappings")
    public Optional<Map<String, JsonNode>> getFieldMappings() {
        return fieldMappings;
    }

    @JsonProperty("remote_data")
    public Optional<List<RemoteData>> getRemoteData() {
        return remoteData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaxRate && equalTo((TaxRate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaxRate other) {
        return id.equals(other.id)
                && remoteId.equals(other.remoteId)
                && createdAt.equals(other.createdAt)
                && modifiedAt.equals(other.modifiedAt)
                && company.equals(other.company)
                && code.equals(other.code)
                && name.equals(other.name)
                && description.equals(other.description)
                && status.equals(other.status)
                && country.equals(other.country)
                && totalTaxRate.equals(other.totalTaxRate)
                && effectiveTaxRate.equals(other.effectiveTaxRate)
                && taxComponents.equals(other.taxComponents)
                && remoteWasDeleted.equals(other.remoteWasDeleted)
                && fieldMappings.equals(other.fieldMappings)
                && remoteData.equals(other.remoteData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.remoteId,
                this.createdAt,
                this.modifiedAt,
                this.company,
                this.code,
                this.name,
                this.description,
                this.status,
                this.country,
                this.totalTaxRate,
                this.effectiveTaxRate,
                this.taxComponents,
                this.remoteWasDeleted,
                this.fieldMappings,
                this.remoteData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> remoteId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<OffsetDateTime> modifiedAt = Optional.empty();

        private Optional<TaxRateCompany> company = Optional.empty();

        private Optional<String> code = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<TaxRateStatus> status = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<Double> totalTaxRate = Optional.empty();

        private Optional<Double> effectiveTaxRate = Optional.empty();

        private Optional<List<TaxRateTaxComponentsItem>> taxComponents = Optional.empty();

        private Optional<Boolean> remoteWasDeleted = Optional.empty();

        private Optional<Map<String, JsonNode>> fieldMappings = Optional.empty();

        private Optional<List<RemoteData>> remoteData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaxRate other) {
            id(other.getId());
            remoteId(other.getRemoteId());
            createdAt(other.getCreatedAt());
            modifiedAt(other.getModifiedAt());
            company(other.getCompany());
            code(other.getCode());
            name(other.getName());
            description(other.getDescription());
            status(other.getStatus());
            country(other.getCountry());
            totalTaxRate(other.getTotalTaxRate());
            effectiveTaxRate(other.getEffectiveTaxRate());
            taxComponents(other.getTaxComponents());
            remoteWasDeleted(other.getRemoteWasDeleted());
            fieldMappings(other.getFieldMappings());
            remoteData(other.getRemoteData());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The third-party API ID of the matching object.</p>
         */
        @JsonSetter(value = "remote_id", nulls = Nulls.SKIP)
        public Builder remoteId(Optional<String> remoteId) {
            this.remoteId = remoteId;
            return this;
        }

        public Builder remoteId(String remoteId) {
            this.remoteId = Optional.ofNullable(remoteId);
            return this;
        }

        /**
         * <p>The datetime that this object was created by Merge.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The datetime that this object was modified by Merge.</p>
         */
        @JsonSetter(value = "modified_at", nulls = Nulls.SKIP)
        public Builder modifiedAt(Optional<OffsetDateTime> modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }

        public Builder modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = Optional.ofNullable(modifiedAt);
            return this;
        }

        /**
         * <p>The subsidiary that the tax rate belongs to (in the case of multi-entity systems).</p>
         */
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public Builder company(Optional<TaxRateCompany> company) {
            this.company = company;
            return this;
        }

        public Builder company(TaxRateCompany company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * <p>The tax code associated with this tax rate or group of tax rates from the third-party platform.</p>
         */
        @JsonSetter(value = "code", nulls = Nulls.SKIP)
        public Builder code(Optional<String> code) {
            this.code = code;
            return this;
        }

        public Builder code(String code) {
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * <p>The tax rate’s name.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The tax rate's description.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>The tax rate’s status - <code>ACTIVE</code> if an active tax rate, <code>ARCHIVED</code> if not active.</p>
         * <ul>
         * <li><code>ACTIVE</code> - ACTIVE</li>
         * <li><code>ARCHIVED</code> - ARCHIVED</li>
         * </ul>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TaxRateStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TaxRateStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The country the tax rate is associated with.</p>
         */
        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * <p>The tax’s total tax rate - sum of the tax components (not compounded).</p>
         */
        @JsonSetter(value = "total_tax_rate", nulls = Nulls.SKIP)
        public Builder totalTaxRate(Optional<Double> totalTaxRate) {
            this.totalTaxRate = totalTaxRate;
            return this;
        }

        public Builder totalTaxRate(Double totalTaxRate) {
            this.totalTaxRate = Optional.ofNullable(totalTaxRate);
            return this;
        }

        /**
         * <p>The tax rate’s effective tax rate - total amount of tax with compounding.</p>
         */
        @JsonSetter(value = "effective_tax_rate", nulls = Nulls.SKIP)
        public Builder effectiveTaxRate(Optional<Double> effectiveTaxRate) {
            this.effectiveTaxRate = effectiveTaxRate;
            return this;
        }

        public Builder effectiveTaxRate(Double effectiveTaxRate) {
            this.effectiveTaxRate = Optional.ofNullable(effectiveTaxRate);
            return this;
        }

        /**
         * <p>The related tax components of the tax rate.</p>
         */
        @JsonSetter(value = "tax_components", nulls = Nulls.SKIP)
        public Builder taxComponents(Optional<List<TaxRateTaxComponentsItem>> taxComponents) {
            this.taxComponents = taxComponents;
            return this;
        }

        public Builder taxComponents(List<TaxRateTaxComponentsItem> taxComponents) {
            this.taxComponents = Optional.ofNullable(taxComponents);
            return this;
        }

        /**
         * <p>Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. <a href="https://docs.merge.dev/integrations/hris/supported-features/">Learn more</a>.</p>
         */
        @JsonSetter(value = "remote_was_deleted", nulls = Nulls.SKIP)
        public Builder remoteWasDeleted(Optional<Boolean> remoteWasDeleted) {
            this.remoteWasDeleted = remoteWasDeleted;
            return this;
        }

        public Builder remoteWasDeleted(Boolean remoteWasDeleted) {
            this.remoteWasDeleted = Optional.ofNullable(remoteWasDeleted);
            return this;
        }

        @JsonSetter(value = "field_mappings", nulls = Nulls.SKIP)
        public Builder fieldMappings(Optional<Map<String, JsonNode>> fieldMappings) {
            this.fieldMappings = fieldMappings;
            return this;
        }

        public Builder fieldMappings(Map<String, JsonNode> fieldMappings) {
            this.fieldMappings = Optional.ofNullable(fieldMappings);
            return this;
        }

        @JsonSetter(value = "remote_data", nulls = Nulls.SKIP)
        public Builder remoteData(Optional<List<RemoteData>> remoteData) {
            this.remoteData = remoteData;
            return this;
        }

        public Builder remoteData(List<RemoteData> remoteData) {
            this.remoteData = Optional.ofNullable(remoteData);
            return this;
        }

        public TaxRate build() {
            return new TaxRate(
                    id,
                    remoteId,
                    createdAt,
                    modifiedAt,
                    company,
                    code,
                    name,
                    description,
                    status,
                    country,
                    totalTaxRate,
                    effectiveTaxRate,
                    taxComponents,
                    remoteWasDeleted,
                    fieldMappings,
                    remoteData,
                    additionalProperties);
        }
    }
}
