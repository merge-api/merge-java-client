/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.accounting;

import com.merge.api.accounting.types.BankFeedTransaction;
import com.merge.api.accounting.types.BankFeedTransactionEndpointRequest;
import com.merge.api.accounting.types.BankFeedTransactionResponse;
import com.merge.api.accounting.types.BankFeedTransactionsListRequest;
import com.merge.api.accounting.types.BankFeedTransactionsRetrieveRequest;
import com.merge.api.accounting.types.MetaResponse;
import com.merge.api.core.ClientOptions;
import com.merge.api.core.RequestOptions;
import com.merge.api.core.SyncPagingIterable;
import java.util.concurrent.CompletableFuture;

public class AsyncBankFeedTransactionsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawBankFeedTransactionsClient rawClient;

    public AsyncBankFeedTransactionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawBankFeedTransactionsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawBankFeedTransactionsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Returns a list of <code>BankFeedTransaction</code> objects.
     */
    public CompletableFuture<SyncPagingIterable<BankFeedTransaction>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Returns a list of <code>BankFeedTransaction</code> objects.
     */
    public CompletableFuture<SyncPagingIterable<BankFeedTransaction>> list(BankFeedTransactionsListRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * Returns a list of <code>BankFeedTransaction</code> objects.
     */
    public CompletableFuture<SyncPagingIterable<BankFeedTransaction>> list(
            BankFeedTransactionsListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Creates a <code>BankFeedTransaction</code> object with the given values.
     */
    public CompletableFuture<BankFeedTransactionResponse> create(BankFeedTransactionEndpointRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Creates a <code>BankFeedTransaction</code> object with the given values.
     */
    public CompletableFuture<BankFeedTransactionResponse> create(
            BankFeedTransactionEndpointRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns a <code>BankFeedTransaction</code> object with the given <code>id</code>.
     */
    public CompletableFuture<BankFeedTransaction> retrieve(String id) {
        return this.rawClient.retrieve(id).thenApply(response -> response.body());
    }

    /**
     * Returns a <code>BankFeedTransaction</code> object with the given <code>id</code>.
     */
    public CompletableFuture<BankFeedTransaction> retrieve(String id, BankFeedTransactionsRetrieveRequest request) {
        return this.rawClient.retrieve(id, request).thenApply(response -> response.body());
    }

    /**
     * Returns a <code>BankFeedTransaction</code> object with the given <code>id</code>.
     */
    public CompletableFuture<BankFeedTransaction> retrieve(
            String id, BankFeedTransactionsRetrieveRequest request, RequestOptions requestOptions) {
        return this.rawClient.retrieve(id, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns metadata for <code>BankFeedTransaction</code> POSTs.
     */
    public CompletableFuture<MetaResponse> metaPostRetrieve() {
        return this.rawClient.metaPostRetrieve().thenApply(response -> response.body());
    }

    /**
     * Returns metadata for <code>BankFeedTransaction</code> POSTs.
     */
    public CompletableFuture<MetaResponse> metaPostRetrieve(RequestOptions requestOptions) {
        return this.rawClient.metaPostRetrieve(requestOptions).thenApply(response -> response.body());
    }
}
