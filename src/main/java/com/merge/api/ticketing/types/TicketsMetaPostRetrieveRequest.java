/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.ticketing.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TicketsMetaPostRetrieveRequest.Builder.class)
public final class TicketsMetaPostRetrieveRequest {
    private final Optional<String> collectionId;

    private final Optional<String> ticketType;

    private final Map<String, Object> additionalProperties;

    private TicketsMetaPostRetrieveRequest(
            Optional<String> collectionId, Optional<String> ticketType, Map<String, Object> additionalProperties) {
        this.collectionId = collectionId;
        this.ticketType = ticketType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If provided, will only return tickets for this collection.
     */
    @JsonProperty("collection_id")
    public Optional<String> getCollectionId() {
        return collectionId;
    }

    /**
     * @return If provided, will only return tickets for this ticket type.
     */
    @JsonProperty("ticket_type")
    public Optional<String> getTicketType() {
        return ticketType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TicketsMetaPostRetrieveRequest && equalTo((TicketsMetaPostRetrieveRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TicketsMetaPostRetrieveRequest other) {
        return collectionId.equals(other.collectionId) && ticketType.equals(other.ticketType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.collectionId, this.ticketType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> collectionId = Optional.empty();

        private Optional<String> ticketType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TicketsMetaPostRetrieveRequest other) {
            collectionId(other.getCollectionId());
            ticketType(other.getTicketType());
            return this;
        }

        /**
         * <p>If provided, will only return tickets for this collection.</p>
         */
        @JsonSetter(value = "collection_id", nulls = Nulls.SKIP)
        public Builder collectionId(Optional<String> collectionId) {
            this.collectionId = collectionId;
            return this;
        }

        public Builder collectionId(String collectionId) {
            this.collectionId = Optional.ofNullable(collectionId);
            return this;
        }

        /**
         * <p>If provided, will only return tickets for this ticket type.</p>
         */
        @JsonSetter(value = "ticket_type", nulls = Nulls.SKIP)
        public Builder ticketType(Optional<String> ticketType) {
            this.ticketType = ticketType;
            return this;
        }

        public Builder ticketType(String ticketType) {
            this.ticketType = Optional.ofNullable(ticketType);
            return this;
        }

        public TicketsMetaPostRetrieveRequest build() {
            return new TicketsMetaPostRetrieveRequest(collectionId, ticketType, additionalProperties);
        }
    }
}
