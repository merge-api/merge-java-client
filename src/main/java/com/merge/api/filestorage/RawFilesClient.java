/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.filestorage;

import com.merge.api.core.ApiError;
import com.merge.api.core.ClientOptions;
import com.merge.api.core.MediaTypes;
import com.merge.api.core.MergeApiHttpResponse;
import com.merge.api.core.MergeException;
import com.merge.api.core.ObjectMappers;
import com.merge.api.core.QueryStringMapper;
import com.merge.api.core.RequestOptions;
import com.merge.api.core.ResponseBodyInputStream;
import com.merge.api.core.SyncPagingIterable;
import com.merge.api.filestorage.types.DownloadRequestMeta;
import com.merge.api.filestorage.types.File;
import com.merge.api.filestorage.types.FileStorageFileEndpointRequest;
import com.merge.api.filestorage.types.FileStorageFileResponse;
import com.merge.api.filestorage.types.FilesDownloadRequestMetaListRequest;
import com.merge.api.filestorage.types.FilesDownloadRequestMetaRetrieveRequest;
import com.merge.api.filestorage.types.FilesDownloadRetrieveRequest;
import com.merge.api.filestorage.types.FilesListRequest;
import com.merge.api.filestorage.types.FilesRetrieveRequest;
import com.merge.api.filestorage.types.MetaResponse;
import com.merge.api.filestorage.types.PaginatedDownloadRequestMetaList;
import com.merge.api.filestorage.types.PaginatedFileList;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawFilesClient {
    protected final ClientOptions clientOptions;

    public RawFilesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns a list of <code>File</code> objects.
     */
    public MergeApiHttpResponse<SyncPagingIterable<File>> list() {
        return list(FilesListRequest.builder().build());
    }

    /**
     * Returns a list of <code>File</code> objects.
     */
    public MergeApiHttpResponse<SyncPagingIterable<File>> list(FilesListRequest request) {
        return list(request, null);
    }

    /**
     * Returns a list of <code>File</code> objects.
     */
    public MergeApiHttpResponse<SyncPagingIterable<File>> list(
            FilesListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("filestorage/v1/files");
        if (request.getCreatedAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "created_after", request.getCreatedAfter().get().toString(), false);
        }
        if (request.getCreatedBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "created_before", request.getCreatedBefore().get().toString(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getDriveId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "drive_id", request.getDriveId().get(), false);
        }
        if (request.getFolderId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "folder_id", request.getFolderId().get(), false);
        }
        if (request.getIncludeDeletedData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_deleted_data",
                    request.getIncludeDeletedData().get().toString(),
                    false);
        }
        if (request.getIncludeRemoteData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_remote_data",
                    request.getIncludeRemoteData().get().toString(),
                    false);
        }
        if (request.getIncludeShellData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_shell_data",
                    request.getIncludeShellData().get().toString(),
                    false);
        }
        if (request.getMimeType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mime_type", request.getMimeType().get(), false);
        }
        if (request.getModifiedAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "modified_after", request.getModifiedAfter().get().toString(), false);
        }
        if (request.getModifiedBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "modified_before",
                    request.getModifiedBefore().get().toString(),
                    false);
        }
        if (request.getName().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "name", request.getName().get(), false);
        }
        if (request.getOrderBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "order_by", request.getOrderBy().get().toString(), false);
        }
        if (request.getPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page_size", request.getPageSize().get().toString(), false);
        }
        if (request.getRemoteId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "remote_id", request.getRemoteId().get(), false);
        }
        if (request.getExpand().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "expand", request.getExpand().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                PaginatedFileList parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PaginatedFileList.class);
                Optional<String> startingAfter = parsedResponse.getNext();
                FilesListRequest nextRequest = FilesListRequest.builder()
                        .from(request)
                        .cursor(startingAfter)
                        .build();
                List<File> result = parsedResponse.getResults().orElse(Collections.emptyList());
                return new MergeApiHttpResponse<>(
                        new SyncPagingIterable<File>(
                                startingAfter.isPresent(), result, () -> list(nextRequest, requestOptions)
                                        .body()),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }

    /**
     * Creates a <code>File</code> object with the given values.
     */
    public MergeApiHttpResponse<FileStorageFileResponse> create(FileStorageFileEndpointRequest request) {
        return create(request, null);
    }

    /**
     * Creates a <code>File</code> object with the given values.
     */
    public MergeApiHttpResponse<FileStorageFileResponse> create(
            FileStorageFileEndpointRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("filestorage/v1/files");
        if (request.getIsDebugMode().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "is_debug_mode", request.getIsDebugMode().get().toString(), false);
        }
        if (request.getRunAsync().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "run_async", request.getRunAsync().get().toString(), false);
        }
        Map<String, Object> properties = new HashMap<>();
        properties.put("model", request.getModel());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MergeApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FileStorageFileResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns a <code>File</code> object with the given <code>id</code>.
     */
    public MergeApiHttpResponse<File> retrieve(String id) {
        return retrieve(id, FilesRetrieveRequest.builder().build());
    }

    /**
     * Returns a <code>File</code> object with the given <code>id</code>.
     */
    public MergeApiHttpResponse<File> retrieve(String id, FilesRetrieveRequest request) {
        return retrieve(id, request, null);
    }

    /**
     * Returns a <code>File</code> object with the given <code>id</code>.
     */
    public MergeApiHttpResponse<File> retrieve(String id, FilesRetrieveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("filestorage/v1/files")
                .addPathSegment(id);
        if (request.getIncludeRemoteData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_remote_data",
                    request.getIncludeRemoteData().get().toString(),
                    false);
        }
        if (request.getIncludeShellData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_shell_data",
                    request.getIncludeShellData().get().toString(),
                    false);
        }
        if (request.getExpand().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "expand", request.getExpand().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MergeApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), File.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns the <code>File</code> content with the given <code>id</code> as a stream of bytes.
     */
    public MergeApiHttpResponse<InputStream> downloadRetrieve(String id) {
        return downloadRetrieve(id, FilesDownloadRetrieveRequest.builder().build());
    }

    /**
     * Returns the <code>File</code> content with the given <code>id</code> as a stream of bytes.
     */
    public MergeApiHttpResponse<InputStream> downloadRetrieve(String id, FilesDownloadRetrieveRequest request) {
        return downloadRetrieve(id, request, null);
    }

    /**
     * Returns the <code>File</code> content with the given <code>id</code> as a stream of bytes.
     */
    public MergeApiHttpResponse<InputStream> downloadRetrieve(
            String id, FilesDownloadRetrieveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("filestorage/v1/files")
                .addPathSegment(id)
                .addPathSegments("download");
        if (request.getIncludeShellData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_shell_data",
                    request.getIncludeShellData().get().toString(),
                    false);
        }
        if (request.getMimeType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mime_type", request.getMimeType().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try {
            Response response = client.newCall(okhttpRequest).execute();
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MergeApiHttpResponse<>(new ResponseBodyInputStream(response), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns metadata to construct an authenticated file download request for a singular file, allowing you to download file directly from the third-party.
     */
    public MergeApiHttpResponse<DownloadRequestMeta> downloadRequestMetaRetrieve(String id) {
        return downloadRequestMetaRetrieve(
                id, FilesDownloadRequestMetaRetrieveRequest.builder().build());
    }

    /**
     * Returns metadata to construct an authenticated file download request for a singular file, allowing you to download file directly from the third-party.
     */
    public MergeApiHttpResponse<DownloadRequestMeta> downloadRequestMetaRetrieve(
            String id, FilesDownloadRequestMetaRetrieveRequest request) {
        return downloadRequestMetaRetrieve(id, request, null);
    }

    /**
     * Returns metadata to construct an authenticated file download request for a singular file, allowing you to download file directly from the third-party.
     */
    public MergeApiHttpResponse<DownloadRequestMeta> downloadRequestMetaRetrieve(
            String id, FilesDownloadRequestMetaRetrieveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("filestorage/v1/files")
                .addPathSegment(id)
                .addPathSegments("download/request-meta");
        if (request.getMimeType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mime_type", request.getMimeType().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MergeApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), DownloadRequestMeta.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns metadata to construct authenticated file download requests, allowing you to download files directly from the third-party.
     */
    public MergeApiHttpResponse<SyncPagingIterable<DownloadRequestMeta>> downloadRequestMetaList() {
        return downloadRequestMetaList(
                FilesDownloadRequestMetaListRequest.builder().build());
    }

    /**
     * Returns metadata to construct authenticated file download requests, allowing you to download files directly from the third-party.
     */
    public MergeApiHttpResponse<SyncPagingIterable<DownloadRequestMeta>> downloadRequestMetaList(
            FilesDownloadRequestMetaListRequest request) {
        return downloadRequestMetaList(request, null);
    }

    /**
     * Returns metadata to construct authenticated file download requests, allowing you to download files directly from the third-party.
     */
    public MergeApiHttpResponse<SyncPagingIterable<DownloadRequestMeta>> downloadRequestMetaList(
            FilesDownloadRequestMetaListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("filestorage/v1/files/download/request-meta");
        if (request.getCreatedAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "created_after", request.getCreatedAfter().get(), false);
        }
        if (request.getCreatedBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "created_before", request.getCreatedBefore().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getIncludeDeletedData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_deleted_data",
                    request.getIncludeDeletedData().get().toString(),
                    false);
        }
        if (request.getMimeTypes().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mime_types", request.getMimeTypes().get(), false);
        }
        if (request.getModifiedAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "modified_after", request.getModifiedAfter().get(), false);
        }
        if (request.getModifiedBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "modified_before", request.getModifiedBefore().get(), false);
        }
        if (request.getOrderBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "order_by", request.getOrderBy().get().toString(), false);
        }
        if (request.getPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page_size", request.getPageSize().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                PaginatedDownloadRequestMetaList parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                        responseBody.string(), PaginatedDownloadRequestMetaList.class);
                Optional<String> startingAfter = parsedResponse.getNext();
                FilesDownloadRequestMetaListRequest nextRequest = FilesDownloadRequestMetaListRequest.builder()
                        .from(request)
                        .cursor(startingAfter)
                        .build();
                List<DownloadRequestMeta> result = parsedResponse.getResults().orElse(Collections.emptyList());
                return new MergeApiHttpResponse<>(
                        new SyncPagingIterable<DownloadRequestMeta>(
                                startingAfter.isPresent(), result, () -> downloadRequestMetaList(
                                                nextRequest, requestOptions)
                                        .body()),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns metadata for <code>FileStorageFile</code> POSTs.
     */
    public MergeApiHttpResponse<MetaResponse> metaPostRetrieve() {
        return metaPostRetrieve(null);
    }

    /**
     * Returns metadata for <code>FileStorageFile</code> POSTs.
     */
    public MergeApiHttpResponse<MetaResponse> metaPostRetrieve(RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("filestorage/v1/files/meta/post")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MergeApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), MetaResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new ApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MergeException("Network error executing HTTP request", e);
        }
    }
}
